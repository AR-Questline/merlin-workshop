Shader "TG/Character/RealSkin_Morph"
{
    Properties
    {
        [NoScaleOffset]_DiffuseMap("Diffuse Map", 2D) = "white" {}
        _DiffuseColor("Diffuse Color", Color) = (1, 1, 1, 0)
        [Normal][NoScaleOffset]_NormalMap("Normal Map", 2D) = "bump" {}
        _NormalStrength("Normal Strength", Range(0, 2)) = 1
        [NoScaleOffset]_MaskMap("Mask Map", 2D) = "grey" {}
        _SmoothnessPower("Smoothness Power", Range(0.5, 2)) = 1
        _SmoothnessMin("Smoothness Min", Range(0, 1)) = 0.2
        _SmoothnessMax("Smoothness Max", Range(0, 1)) = 0.8
        _Morph("Morph", Range(0, 1)) = 0
        [NoScaleOffset]_MorphDiffuseMap("Morph Diffuse Map", 2D) = "white" {}
        [Normal][NoScaleOffset]_MorphNormalMap("Morph Normal Map", 2D) = "bump" {}
        [NoScaleOffset]_MorphMaskMap("Morph Mask Map", 2D) = "grey" {}
        [Normal][NoScaleOffset]_MicroNormalMap("Micro Normal Map", 2D) = "bump" {}
        _MicroNormalStrength("Micro Normal Strength", Range(0, 2)) = 0.5
        _MicroNormalTiling("Micro Normal Tiling", Float) = 25
        _MicroSmoothnessMod("Micro Smoothness Mod", Range(-1.5, 1.5)) = 0
        [NoScaleOffset]_SSSMap("Subsurface Map", 2D) = "white" {}
        _SubsurfaceScale("Subsurface Scale", Range(0, 2)) = 1
        [NoScaleOffset]_ThicknessMap("Thickness Map", 2D) = "white" {}
        _ThicknessScaleMin("Thickness Min", Range(0, 1)) = 0.4
        _ThicknessScale("Thickness Max", Range(0, 1)) = 0.9
        [Toggle]BOOLEAN_IS_HEAD("Is Head", Float) = 0
        [NoScaleOffset]_RGBAMask("RGBA/NMUIL Mask", 2D) = "black" {}
        _RSmoothnessMod("R (Nose) Smoothness Mod", Range(-1.5, 1.5)) = 0
        _GSmoothnessMod("G (Mouth) Smoothness Mod", Range(-1.5, 1.5)) = 0
        _BSmoothnessMod("B (Upper Lid) Smoothness Mod", Range(-1.5, 1.5)) = 0
        _ASmoothnessMod("A (Inner Lid) Smoothness Mod", Range(-1.5, 1.5)) = 0
        _UnmaskedSmoothnessMod("Unmasked Smoothness Mod", Range(-1.5, 1.5)) = 0
        _RScatterScale("R (Nose) Scatter Scale", Range(0, 2)) = 1
        _GScatterScale("G (Mouth) Scatter Scale", Range(0, 2)) = 1
        _BScatterScale("B (Upper Lid) Scatter Scale", Range(0, 2)) = 1
        _AScatterScale("A (Inner Lid) Scatter Scale", Range(0, 2)) = 1
        _UnmaskedScatterScale("Unmasked Scatter Scale", Range(0, 2)) = 1
        [NoScaleOffset]_ColorBlendMap("Color Blend Map (Head)", 2D) = "grey" {}
        _ColorBlendStrength("Color Blend Strength (Head)", Range(0, 1)) = 0.5
        [Normal][NoScaleOffset]_NormalBlendMap("Normal Blend Map (Head)", 2D) = "bump" {}
        _NormalBlendStrength("Normal Blend Strength (Head)", Range(0, 2)) = 0.5
        [NoScaleOffset]_MNAOMap("Cavity AO Map (Head)", 2D) = "white" {}
        _MouthCavityAO("Mouth Cavity AO", Range(0.1, 5)) = 2.5
        _NostrilCavityAO("Nostril Cavity AO", Range(0.1, 5)) = 2.5
        _LipsCavityAO("Lips Cavity AO", Range(0.1, 5)) = 2.5
        [NoScaleOffset]_CFULCMask("CFULC Mask (Head)", 2D) = "black" {}
        _CheekSmoothnessMod("Cheek Smoothness Mod", Range(-1.5, 1.5)) = 0
        _ForeheadSmoothnessMod("Forehead Smoothness Mod", Range(-1.5, 1.5)) = 0
        _UpperLipSmoothnessMod("Upper Lip Smoothness Mod", Range(-1.5, 1.5)) = 0
        _ChinSmoothnessMod("Chin Smoothness Mod", Range(-1.5, 1.5)) = 0
        _CheekScatterScale("Cheek Scatter Scale", Range(0, 2)) = 1
        _ForeheadScatterScale("Forehead Scatter Scale", Range(0, 2)) = 1
        _UpperLipScatterScale("Upper Lip Scatter Scale", Range(0, 2)) = 1
        _ChinScatterScale("Chin Scatter Scale", Range(0, 2)) = 1
        [NoScaleOffset]_EarNeckMask("Ear Neck Mask (Head)", 2D) = "black" {}
        _EarSmoothnessMod("Ear Smoothness Mod", Range(-1.5, 1.5)) = 0
        _NeckSmoothnessMod("Neck Smoothness Mod", Range(-1.5, 1.5)) = 0
        _EarScatterScale("Ear Scatter Scale", Range(0, 2)) = 1
        _NeckScatterScale("Neck Scatter Scale", Range(0, 2)) = 1
        [NoScaleOffset]_TattooMaskMap("TattooMaskMap", 2D) = "black" {}
        [HDR]_TattooColorA("TattooColorA", Color) = (0.01960784, 0.01960784, 0.01960784, 1)
        [HDR]_TattooColorB("TattooColorB", Color) = (1, 1, 1, 1)
        [HDR]_TattooColorC("TattooColorC", Color) = (0.01960784, 0.01960784, 0.01960784, 1)
        [HDR]_TattooColorD("TattooColorD", Color) = (0.01960784, 0.01960784, 0.01960784, 0)
        _TattooEmissiveA("TattooEmissiveA", Range(0, 10)) = 0
        _TattooEmissiveB("TattooEmissiveB", Range(0, 10)) = 0
        _TattooEmissiveC("TattooEmissiveC", Range(0, 10)) = 0
        _TattooEmissiveD("TattooEmissiveD", Range(0, 10)) = 0
        [ToggleUI]_TattooWyrdlook("TattooWyrdlook", Float) = 0
        [Normal][NoScaleOffset]_TattooNormalMap("TattooNormalMap", 2D) = "bump" {}
        _TattooNormalA("TattooNormalA", Range(-8, 8)) = 1
        _TattooNormalB("TattooNormalB", Range(-8, 8)) = 1
        _TattooNormalC("TattooNormalC", Range(-8, 8)) = 1
        _TattooNormalD("TattooNormalD", Range(-8, 8)) = 1
        [HideInInspector]_InstanceData("Instance data", Vector) = (0, 0, 0, 0)
        [HideInInspector]_DiffusionProfileHash("Float", Float) = 0
        [HideInInspector]_DiffusionProfileAsset("Vector4", Vector) = (0, 0, 0, 0)
        [HideInInspector]_EmissionColor("Color", Color) = (1, 1, 1, 1)
        [HideInInspector]_RenderQueueType("Float", Float) = 1
        [HideInInspector][ToggleUI]_AddPrecomputedVelocity("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentWritingMotionVec("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_AlphaCutoffEnable("Boolean", Float) = 1
        [HideInInspector]_TransparentSortPriority("_TransparentSortPriority", Float) = 0
        [HideInInspector][ToggleUI]_UseShadowThreshold("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DoubleSidedEnable("Boolean", Float) = 0
        [HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)]_DoubleSidedNormalMode("Float", Float) = 2
        [HideInInspector]_DoubleSidedConstants("Vector4", Vector) = (1, 1, -1, 0)
        [HideInInspector][Enum(Auto, 0, On, 1, Off, 2)]_DoubleSidedGIMode("Float", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPrepassEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPostpassEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_PerPixelSorting("Boolean", Float) = 0
        [HideInInspector]_SurfaceType("Float", Float) = 0
        [HideInInspector]_BlendMode("Float", Float) = 0
        [HideInInspector]_SrcBlend("Float", Float) = 1
        [HideInInspector]_DstBlend("Float", Float) = 0
        [HideInInspector]_DstBlend2("Float", Float) = 0
        [HideInInspector]_AlphaSrcBlend("Float", Float) = 1
        [HideInInspector]_AlphaDstBlend("Float", Float) = 0
        [HideInInspector][ToggleUI]_ZWrite("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_TransparentZWrite("Boolean", Float) = 0
        [HideInInspector]_CullMode("Float", Float) = 2
        [HideInInspector][ToggleUI]_EnableFogOnTransparent("Boolean", Float) = 1
        [HideInInspector]_CullModeForward("Float", Float) = 2
        [HideInInspector][Enum(Front, 1, Back, 2)]_TransparentCullMode("Float", Float) = 2
        [HideInInspector][Enum(UnityEngine.Rendering.HighDefinition.OpaqueCullMode)]_OpaqueCullMode("Float", Float) = 2
        [HideInInspector]_ZTestDepthEqualForOpaque("Float", Int) = 3
        [HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)]_ZTestTransparent("Float", Float) = 4
        [HideInInspector][ToggleUI]_TransparentBackfaceEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_RequireSplitLighting("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ReceivesSSR("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ReceivesSSRTransparent("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_EnableBlendModePreserveSpecularLighting("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_SupportDecals("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ExcludeFromTUAndAA("Boolean", Float) = 0
        [HideInInspector]_StencilRef("Float", Int) = 4
        [HideInInspector]_StencilWriteMask("Float", Int) = 6
        [HideInInspector]_StencilRefDepth("Float", Int) = 8
        [HideInInspector]_StencilWriteMaskDepth("Float", Int) = 9
        [HideInInspector]_StencilRefMV("Float", Int) = 40
        [HideInInspector]_StencilWriteMaskMV("Float", Int) = 41
        [HideInInspector]_StencilRefDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskGBuffer("Float", Int) = 15
        [HideInInspector]_StencilRefGBuffer("Float", Int) = 14
        [HideInInspector]_ZTestGBuffer("Float", Int) = 4
        [HideInInspector][ToggleUI]_RayTracing("Boolean", Float) = 0
        [HideInInspector][Enum(None, 0, Planar, 1, Sphere, 2, Thin, 3)]_RefractionModel("Float", Float) = 0
        [HideInInspector][Enum(SubsurfaceScattering, 0)]_MaterialID("_MaterialID", Float) = 0
        [HideInInspector]_MaterialTypeMask("_MaterialTypeMask", Float) = 1
        [HideInInspector][ToggleUI]_TransmissionEnable("Boolean", Float) = 1
        [HideInInspector][NoScaleOffset]unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="AlphaTest+25"
            "DisableBatching"="False"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "ShadowCaster"
            Tags
            {
                "LightMode" = "ShadowCaster"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        ColorMask 0
        ZClip [_ZClip]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        #pragma multi_compile_local _ KANDRA_SKINNING
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_SHADOWS
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 Real_WorldAbsolutePosition;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_VERTEXID
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0 : TEXCOORD0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint vertexID : VERTEXID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint VertexID;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0 : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition : INTERP1;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.texCoord0.xyzw = input.texCoord0;
            output.Real_WorldAbsolutePosition.xyz = input.Real_WorldAbsolutePosition;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.texCoord0 = input.texCoord0.xyzw;
            output.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        // includeSampleSkinBuffer
        #include "Assets/Code/Kandra/ShaderGraphNodes/SampleSkinBuffer.hlsl"
        
        #ifndef PREVENT_REPEAT_SKIN_SAMPLE
        #define PREVENT_REPEAT_SKIN_SAMPLE
        void Sample_Skin_Buffer_float(uint vertexId, out float3 positionOut, out float3 normalOut, out float3 tangentOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        normalOut = 0;
        tangentOut = 0;
        sampleDeform(vertexId, instanceData, positionOut, normalOut, tangentOut);
        }
        #endif
        
        struct Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float
        {
        float3 ObjectSpaceNormal;
        float3 ObjectSpaceTangent;
        float3 ObjectSpacePosition;
        half4 uv0;
        uint VertexID;
        };
        
        void SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float IN, out float3 Position_1, out float3 Normal_2, out float3 Tangent_3)
        {
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = 0;
        Sample_Skin_Buffer_float(IN.VertexID, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3);
        #else
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = IN.ObjectSpacePosition;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = IN.ObjectSpaceNormal;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = IN.ObjectSpaceTangent;
        #endif
        Position_1 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3;
        Normal_2 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3;
        Tangent_3 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3;
        }
        
        #ifndef PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        #define PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        void Sample_Previous_Position_Buffer_float(uint vertexId, out float3 positionOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        SamplePreviousPosition(vertexId, instanceData, positionOut);
        }
        #endif
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float
        {
        uint VertexID;
        };
        
        void SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(float3 _CurrentPosition, Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float IN, out float3 KandraVelocity_0)
        {
        float3 _Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3 = _CurrentPosition;
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        Sample_Previous_Position_Buffer_float(IN.VertexID, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3);
        #else
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        #endif
        float3 _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        Unity_Subtract_float3(_Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3, _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3);
        #if defined(KANDRA_SKINNING)
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        #else
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = float3(0, 0, 0);
        #endif
        KandraVelocity_0 = _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 CustomVelocity;
            float3 Real_WorldAbsolutePosition;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceNormal = IN.ObjectSpaceNormal;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceTangent = IN.ObjectSpaceTangent;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpacePosition = IN.ObjectSpacePosition;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.uv0 = IN.uv0;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.VertexID = IN.VertexID;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd;
            _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd.VertexID = IN.VertexID;
            float3 _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3);
            #endif
            description.Position = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            description.Normal = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            description.Tangent = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            description.CustomVelocity = _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            description.Real_WorldAbsolutePosition = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
            float AlphaClipThreshold;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(IN.Real_WorldAbsolutePosition, float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.uv0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.VertexID =                                   input.vertexID;
        #endif
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        #include "Assets/Code/Kandra/ShaderGraphNodes/KandraSkinBuffers.hlsl"
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
            uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        
            const AdditionalVertexData additionalVertexData = KANDRA_ADDITIONAL_VERTICES_BUFFER[input.vertexID + instanceData.y];
            input.uv0.x = f16tof32(additionalVertexData.uv & 0x0000FFFF);
            input.uv0.y = f16tof32(additionalVertexData.uv >> 16);
            input.tangentOS.w = additionalVertexData.tangentW;
        #endif
        
            varyings.Real_WorldAbsolutePosition = vertexDescription.Real_WorldAbsolutePosition;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.Real_WorldAbsolutePosition = input.customInterpolators.Real_WorldAbsolutePosition;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "META"
            Tags
            {
                "LightMode" = "META"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ EDITOR_VISUALIZATION
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SCENEPICKINGPASS 1
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD3
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITIONPREDISPLACEMENT_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD3
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD3
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0 : TEXCOORD0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv1 : TEXCOORD1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv2 : TEXCOORD2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv3 : TEXCOORD3;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionPredisplacementRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord3;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        struct VertexDescriptionInputs
        {
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord1 : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord2 : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord3 : INTERP4;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS : INTERP5;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionPredisplacementRWS : INTERP6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS : INTERP7;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.texCoord1.xyzw = input.texCoord1;
            output.texCoord2.xyzw = input.texCoord2;
            output.texCoord3.xyzw = input.texCoord3;
            output.positionRWS.xyz = input.positionRWS;
            output.positionPredisplacementRWS.xyz = input.positionPredisplacementRWS;
            output.normalWS.xyz = input.normalWS;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.texCoord1 = input.texCoord1.xyzw;
            output.texCoord2 = input.texCoord2.xyzw;
            output.texCoord3 = input.texCoord3.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.positionPredisplacementRWS = input.positionPredisplacementRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float SubsurfaceMask;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float((float3(float4(0,0,0,0).xyz)), float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float, _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float, _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            #else
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float = _SubsurfaceScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            #else
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float;
            Unity_Multiply_float_float(_Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float, _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float, _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_SSSMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.r;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_G_5_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.g;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_B_6_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.b;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_A_7_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float, _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float, _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            Unity_Saturate_float(_Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float, _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_ae3712da060746dab0542f01885e16fb_Out_0_Float = _ThicknessScaleMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float = _ThicknessScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ThicknessMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_R_4_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.r;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.g;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_B_6_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.b;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_A_7_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float;
            Unity_OneMinus_float(_SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float;
            Unity_Lerp_float(_Property_ae3712da060746dab0542f01885e16fb_Out_0_Float, _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float, _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            Unity_Saturate_float(_Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float, _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float);
            #endif
            surface.BaseColor = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            surface.Emission = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.Occlusion = _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float;
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.SubsurfaceMask = _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            surface.TransmissionMask = float(1);
            surface.Thickness = _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        #include "Assets/Code/Kandra/ShaderGraphNodes/KandraSkinBuffers.hlsl"
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
            uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        
            const AdditionalVertexData additionalVertexData = KANDRA_ADDITIONAL_VERTICES_BUFFER[input.vertexID + instanceData.y];
            input.uv0.x = f16tof32(additionalVertexData.uv & 0x0000FFFF);
            input.uv0.y = f16tof32(additionalVertexData.uv >> 16);
            input.tangentOS.w = additionalVertexData.tangentW;
        #endif
        
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVertMeshCustomInterpolation' */
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.positionPredisplacementRWS = input.positionPredisplacementRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord1 =                  input.texCoord1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord2 =                  input.texCoord2;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord3 =                  input.texCoord3;
        #endif
        
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVaryingsToFragInputs' */
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.subsurfaceMask =            surfaceDescription.SubsurfaceMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask.xxx;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassLightTransport.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "ScenePickingPass"
            Tags
            {
                "LightMode" = "Picking"
            }
        
            // Render State
            Cull [_CullMode]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma editor_sync_compilation
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        #pragma multi_compile_local _ KANDRA_SKINNING
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define SCENEPICKINGPASS 1
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 Real_WorldAbsolutePosition;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_VERTEXID
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0 : TEXCOORD0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint vertexID : VERTEXID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint VertexID;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition : INTERP4;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.positionRWS.xyz = input.positionRWS;
            output.normalWS.xyz = input.normalWS;
            output.Real_WorldAbsolutePosition.xyz = input.Real_WorldAbsolutePosition;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            output.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        // includeSampleSkinBuffer
        #include "Assets/Code/Kandra/ShaderGraphNodes/SampleSkinBuffer.hlsl"
        
        #ifndef PREVENT_REPEAT_SKIN_SAMPLE
        #define PREVENT_REPEAT_SKIN_SAMPLE
        void Sample_Skin_Buffer_float(uint vertexId, out float3 positionOut, out float3 normalOut, out float3 tangentOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        normalOut = 0;
        tangentOut = 0;
        sampleDeform(vertexId, instanceData, positionOut, normalOut, tangentOut);
        }
        #endif
        
        struct Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float
        {
        float3 ObjectSpaceNormal;
        float3 ObjectSpaceTangent;
        float3 ObjectSpacePosition;
        half4 uv0;
        uint VertexID;
        };
        
        void SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float IN, out float3 Position_1, out float3 Normal_2, out float3 Tangent_3)
        {
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = 0;
        Sample_Skin_Buffer_float(IN.VertexID, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3);
        #else
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = IN.ObjectSpacePosition;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = IN.ObjectSpaceNormal;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = IN.ObjectSpaceTangent;
        #endif
        Position_1 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3;
        Normal_2 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3;
        Tangent_3 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3;
        }
        
        #ifndef PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        #define PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        void Sample_Previous_Position_Buffer_float(uint vertexId, out float3 positionOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        SamplePreviousPosition(vertexId, instanceData, positionOut);
        }
        #endif
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float
        {
        uint VertexID;
        };
        
        void SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(float3 _CurrentPosition, Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float IN, out float3 KandraVelocity_0)
        {
        float3 _Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3 = _CurrentPosition;
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        Sample_Previous_Position_Buffer_float(IN.VertexID, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3);
        #else
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        #endif
        float3 _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        Unity_Subtract_float3(_Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3, _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3);
        #if defined(KANDRA_SKINNING)
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        #else
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = float3(0, 0, 0);
        #endif
        KandraVelocity_0 = _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 CustomVelocity;
            float3 Real_WorldAbsolutePosition;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceNormal = IN.ObjectSpaceNormal;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceTangent = IN.ObjectSpaceTangent;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpacePosition = IN.ObjectSpacePosition;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.uv0 = IN.uv0;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.VertexID = IN.VertexID;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd;
            _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd.VertexID = IN.VertexID;
            float3 _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3);
            #endif
            description.Position = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            description.Normal = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            description.Tangent = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            description.CustomVelocity = _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            description.Real_WorldAbsolutePosition = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float SubsurfaceMask;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(IN.Real_WorldAbsolutePosition, float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float, _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float, _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            #else
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float = _SubsurfaceScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            #else
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float;
            Unity_Multiply_float_float(_Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float, _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float, _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_SSSMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.r;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_G_5_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.g;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_B_6_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.b;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_A_7_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float, _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float, _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            Unity_Saturate_float(_Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float, _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_ae3712da060746dab0542f01885e16fb_Out_0_Float = _ThicknessScaleMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float = _ThicknessScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ThicknessMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_R_4_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.r;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.g;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_B_6_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.b;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_A_7_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float;
            Unity_OneMinus_float(_SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float;
            Unity_Lerp_float(_Property_ae3712da060746dab0542f01885e16fb_Out_0_Float, _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float, _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            Unity_Saturate_float(_Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float, _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float);
            #endif
            surface.BaseColor = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            surface.Emission = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.Occlusion = _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float;
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.SubsurfaceMask = _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            surface.TransmissionMask = float(1);
            surface.Thickness = _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.uv0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.VertexID =                                   input.vertexID;
        #endif
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        #include "Assets/Code/Kandra/ShaderGraphNodes/KandraSkinBuffers.hlsl"
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
            uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        
            const AdditionalVertexData additionalVertexData = KANDRA_ADDITIONAL_VERTICES_BUFFER[input.vertexID + instanceData.y];
            input.uv0.x = f16tof32(additionalVertexData.uv & 0x0000FFFF);
            input.uv0.y = f16tof32(additionalVertexData.uv >> 16);
            input.tangentOS.w = additionalVertexData.tangentW;
        #endif
        
            varyings.Real_WorldAbsolutePosition = vertexDescription.Real_WorldAbsolutePosition;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.Real_WorldAbsolutePosition = input.customInterpolators.Real_WorldAbsolutePosition;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.subsurfaceMask =            surfaceDescription.SubsurfaceMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask.xxx;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "SceneSelectionPass"
            Tags
            {
                "LightMode" = "SceneSelectionPass"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma editor_sync_compilation
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        #pragma multi_compile_local _ KANDRA_SKINNING
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SCENESELECTIONPASS 1
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 Real_WorldAbsolutePosition;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_VERTEXID
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0 : TEXCOORD0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint vertexID : VERTEXID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint VertexID;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition : INTERP4;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.positionRWS.xyz = input.positionRWS;
            output.normalWS.xyz = input.normalWS;
            output.Real_WorldAbsolutePosition.xyz = input.Real_WorldAbsolutePosition;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            output.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        // includeSampleSkinBuffer
        #include "Assets/Code/Kandra/ShaderGraphNodes/SampleSkinBuffer.hlsl"
        
        #ifndef PREVENT_REPEAT_SKIN_SAMPLE
        #define PREVENT_REPEAT_SKIN_SAMPLE
        void Sample_Skin_Buffer_float(uint vertexId, out float3 positionOut, out float3 normalOut, out float3 tangentOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        normalOut = 0;
        tangentOut = 0;
        sampleDeform(vertexId, instanceData, positionOut, normalOut, tangentOut);
        }
        #endif
        
        struct Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float
        {
        float3 ObjectSpaceNormal;
        float3 ObjectSpaceTangent;
        float3 ObjectSpacePosition;
        half4 uv0;
        uint VertexID;
        };
        
        void SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float IN, out float3 Position_1, out float3 Normal_2, out float3 Tangent_3)
        {
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = 0;
        Sample_Skin_Buffer_float(IN.VertexID, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3);
        #else
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = IN.ObjectSpacePosition;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = IN.ObjectSpaceNormal;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = IN.ObjectSpaceTangent;
        #endif
        Position_1 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3;
        Normal_2 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3;
        Tangent_3 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3;
        }
        
        #ifndef PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        #define PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        void Sample_Previous_Position_Buffer_float(uint vertexId, out float3 positionOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        SamplePreviousPosition(vertexId, instanceData, positionOut);
        }
        #endif
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float
        {
        uint VertexID;
        };
        
        void SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(float3 _CurrentPosition, Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float IN, out float3 KandraVelocity_0)
        {
        float3 _Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3 = _CurrentPosition;
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        Sample_Previous_Position_Buffer_float(IN.VertexID, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3);
        #else
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        #endif
        float3 _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        Unity_Subtract_float3(_Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3, _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3);
        #if defined(KANDRA_SKINNING)
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        #else
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = float3(0, 0, 0);
        #endif
        KandraVelocity_0 = _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 CustomVelocity;
            float3 Real_WorldAbsolutePosition;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceNormal = IN.ObjectSpaceNormal;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceTangent = IN.ObjectSpaceTangent;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpacePosition = IN.ObjectSpacePosition;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.uv0 = IN.uv0;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.VertexID = IN.VertexID;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd;
            _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd.VertexID = IN.VertexID;
            float3 _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3);
            #endif
            description.Position = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            description.Normal = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            description.Tangent = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            description.CustomVelocity = _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            description.Real_WorldAbsolutePosition = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float SubsurfaceMask;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(IN.Real_WorldAbsolutePosition, float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float, _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float, _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            #else
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float = _SubsurfaceScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            #else
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float;
            Unity_Multiply_float_float(_Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float, _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float, _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_SSSMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.r;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_G_5_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.g;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_B_6_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.b;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_A_7_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float, _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float, _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            Unity_Saturate_float(_Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float, _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_ae3712da060746dab0542f01885e16fb_Out_0_Float = _ThicknessScaleMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float = _ThicknessScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ThicknessMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_R_4_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.r;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.g;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_B_6_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.b;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_A_7_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float;
            Unity_OneMinus_float(_SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float;
            Unity_Lerp_float(_Property_ae3712da060746dab0542f01885e16fb_Out_0_Float, _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float, _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            Unity_Saturate_float(_Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float, _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float);
            #endif
            surface.BaseColor = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            surface.Emission = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.Occlusion = _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float;
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.SubsurfaceMask = _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            surface.TransmissionMask = float(1);
            surface.Thickness = _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.uv0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.VertexID =                                   input.vertexID;
        #endif
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        #include "Assets/Code/Kandra/ShaderGraphNodes/KandraSkinBuffers.hlsl"
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
            uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        
            const AdditionalVertexData additionalVertexData = KANDRA_ADDITIONAL_VERTICES_BUFFER[input.vertexID + instanceData.y];
            input.uv0.x = f16tof32(additionalVertexData.uv & 0x0000FFFF);
            input.uv0.y = f16tof32(additionalVertexData.uv >> 16);
            input.tangentOS.w = additionalVertexData.tangentW;
        #endif
        
            varyings.Real_WorldAbsolutePosition = vertexDescription.Real_WorldAbsolutePosition;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.Real_WorldAbsolutePosition = input.customInterpolators.Real_WorldAbsolutePosition;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.subsurfaceMask =            surfaceDescription.SubsurfaceMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask.xxx;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "MotionVectors"
            Tags
            {
                "LightMode" = "MotionVectors"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskMV]
        Ref [_StencilRefMV]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        AlphaToMask [_AlphaCutoffEnable]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
        #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma multi_compile_fragment _ WRITE_DECAL_BUFFER_AND_RENDERING_LAYER
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        #pragma multi_compile_local _ KANDRA_SKINNING
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_MOTION_VECTORS
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 Real_WorldAbsolutePosition;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_VERTEXID
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0 : TEXCOORD0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint vertexID : VERTEXID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint VertexID;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition : INTERP4;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.positionRWS.xyz = input.positionRWS;
            output.normalWS.xyz = input.normalWS;
            output.Real_WorldAbsolutePosition.xyz = input.Real_WorldAbsolutePosition;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            output.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        // includeSampleSkinBuffer
        #include "Assets/Code/Kandra/ShaderGraphNodes/SampleSkinBuffer.hlsl"
        
        #ifndef PREVENT_REPEAT_SKIN_SAMPLE
        #define PREVENT_REPEAT_SKIN_SAMPLE
        void Sample_Skin_Buffer_float(uint vertexId, out float3 positionOut, out float3 normalOut, out float3 tangentOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        normalOut = 0;
        tangentOut = 0;
        sampleDeform(vertexId, instanceData, positionOut, normalOut, tangentOut);
        }
        #endif
        
        struct Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float
        {
        float3 ObjectSpaceNormal;
        float3 ObjectSpaceTangent;
        float3 ObjectSpacePosition;
        half4 uv0;
        uint VertexID;
        };
        
        void SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float IN, out float3 Position_1, out float3 Normal_2, out float3 Tangent_3)
        {
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = 0;
        Sample_Skin_Buffer_float(IN.VertexID, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3);
        #else
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = IN.ObjectSpacePosition;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = IN.ObjectSpaceNormal;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = IN.ObjectSpaceTangent;
        #endif
        Position_1 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3;
        Normal_2 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3;
        Tangent_3 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3;
        }
        
        #ifndef PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        #define PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        void Sample_Previous_Position_Buffer_float(uint vertexId, out float3 positionOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        SamplePreviousPosition(vertexId, instanceData, positionOut);
        }
        #endif
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float
        {
        uint VertexID;
        };
        
        void SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(float3 _CurrentPosition, Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float IN, out float3 KandraVelocity_0)
        {
        float3 _Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3 = _CurrentPosition;
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        Sample_Previous_Position_Buffer_float(IN.VertexID, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3);
        #else
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        #endif
        float3 _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        Unity_Subtract_float3(_Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3, _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3);
        #if defined(KANDRA_SKINNING)
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        #else
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = float3(0, 0, 0);
        #endif
        KandraVelocity_0 = _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 CustomVelocity;
            float3 Real_WorldAbsolutePosition;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceNormal = IN.ObjectSpaceNormal;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceTangent = IN.ObjectSpaceTangent;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpacePosition = IN.ObjectSpacePosition;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.uv0 = IN.uv0;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.VertexID = IN.VertexID;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd;
            _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd.VertexID = IN.VertexID;
            float3 _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3);
            #endif
            description.Position = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            description.Normal = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            description.Tangent = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            description.CustomVelocity = _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            description.Real_WorldAbsolutePosition = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float SubsurfaceMask;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(IN.Real_WorldAbsolutePosition, float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float, _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float, _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            #else
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float = _SubsurfaceScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            #else
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float;
            Unity_Multiply_float_float(_Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float, _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float, _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_SSSMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.r;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_G_5_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.g;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_B_6_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.b;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_A_7_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float, _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float, _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            Unity_Saturate_float(_Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float, _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_ae3712da060746dab0542f01885e16fb_Out_0_Float = _ThicknessScaleMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float = _ThicknessScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ThicknessMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_R_4_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.r;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.g;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_B_6_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.b;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_A_7_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float;
            Unity_OneMinus_float(_SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float;
            Unity_Lerp_float(_Property_ae3712da060746dab0542f01885e16fb_Out_0_Float, _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float, _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            Unity_Saturate_float(_Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float, _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float);
            #endif
            surface.BaseColor = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            surface.Emission = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.Occlusion = _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float;
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.SubsurfaceMask = _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            surface.TransmissionMask = float(1);
            surface.Thickness = _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.uv0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.VertexID =                                   input.vertexID;
        #endif
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        #include "Assets/Code/Kandra/ShaderGraphNodes/KandraSkinBuffers.hlsl"
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
            uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        
            const AdditionalVertexData additionalVertexData = KANDRA_ADDITIONAL_VERTICES_BUFFER[input.vertexID + instanceData.y];
            input.uv0.x = f16tof32(additionalVertexData.uv & 0x0000FFFF);
            input.uv0.y = f16tof32(additionalVertexData.uv >> 16);
            input.tangentOS.w = additionalVertexData.tangentW;
        #endif
        
            varyings.Real_WorldAbsolutePosition = vertexDescription.Real_WorldAbsolutePosition;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.Real_WorldAbsolutePosition = input.customInterpolators.Real_WorldAbsolutePosition;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.subsurfaceMask =            surfaceDescription.SubsurfaceMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask.xxx;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassMotionVectors.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "TransparentDepthPrepass"
            Tags
            {
                "LightMode" = "TransparentDepthPrepass"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One Zero
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        #pragma multi_compile_local _ KANDRA_SKINNING
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_TRANSPARENT_DEPTH_PREPASS
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 Real_WorldAbsolutePosition;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_VERTEXID
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0 : TEXCOORD0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint vertexID : VERTEXID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint VertexID;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition : INTERP4;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.positionRWS.xyz = input.positionRWS;
            output.normalWS.xyz = input.normalWS;
            output.Real_WorldAbsolutePosition.xyz = input.Real_WorldAbsolutePosition;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            output.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        // includeSampleSkinBuffer
        #include "Assets/Code/Kandra/ShaderGraphNodes/SampleSkinBuffer.hlsl"
        
        #ifndef PREVENT_REPEAT_SKIN_SAMPLE
        #define PREVENT_REPEAT_SKIN_SAMPLE
        void Sample_Skin_Buffer_float(uint vertexId, out float3 positionOut, out float3 normalOut, out float3 tangentOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        normalOut = 0;
        tangentOut = 0;
        sampleDeform(vertexId, instanceData, positionOut, normalOut, tangentOut);
        }
        #endif
        
        struct Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float
        {
        float3 ObjectSpaceNormal;
        float3 ObjectSpaceTangent;
        float3 ObjectSpacePosition;
        half4 uv0;
        uint VertexID;
        };
        
        void SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float IN, out float3 Position_1, out float3 Normal_2, out float3 Tangent_3)
        {
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = 0;
        Sample_Skin_Buffer_float(IN.VertexID, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3);
        #else
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = IN.ObjectSpacePosition;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = IN.ObjectSpaceNormal;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = IN.ObjectSpaceTangent;
        #endif
        Position_1 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3;
        Normal_2 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3;
        Tangent_3 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3;
        }
        
        #ifndef PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        #define PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        void Sample_Previous_Position_Buffer_float(uint vertexId, out float3 positionOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        SamplePreviousPosition(vertexId, instanceData, positionOut);
        }
        #endif
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float
        {
        uint VertexID;
        };
        
        void SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(float3 _CurrentPosition, Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float IN, out float3 KandraVelocity_0)
        {
        float3 _Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3 = _CurrentPosition;
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        Sample_Previous_Position_Buffer_float(IN.VertexID, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3);
        #else
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        #endif
        float3 _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        Unity_Subtract_float3(_Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3, _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3);
        #if defined(KANDRA_SKINNING)
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        #else
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = float3(0, 0, 0);
        #endif
        KandraVelocity_0 = _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 CustomVelocity;
            float3 Real_WorldAbsolutePosition;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceNormal = IN.ObjectSpaceNormal;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceTangent = IN.ObjectSpaceTangent;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpacePosition = IN.ObjectSpacePosition;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.uv0 = IN.uv0;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.VertexID = IN.VertexID;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd;
            _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd.VertexID = IN.VertexID;
            float3 _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3);
            #endif
            description.Position = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            description.Normal = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            description.Tangent = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            description.CustomVelocity = _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            description.Real_WorldAbsolutePosition = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
            float AlphaClipThreshold;
            float3 NormalTS;
            float Smoothness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(IN.Real_WorldAbsolutePosition, float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.uv0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.VertexID =                                   input.vertexID;
        #endif
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        #include "Assets/Code/Kandra/ShaderGraphNodes/KandraSkinBuffers.hlsl"
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
            uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        
            const AdditionalVertexData additionalVertexData = KANDRA_ADDITIONAL_VERTICES_BUFFER[input.vertexID + instanceData.y];
            input.uv0.x = f16tof32(additionalVertexData.uv & 0x0000FFFF);
            input.uv0.y = f16tof32(additionalVertexData.uv >> 16);
            input.tangentOS.w = additionalVertexData.tangentW;
        #endif
        
            varyings.Real_WorldAbsolutePosition = vertexDescription.Real_WorldAbsolutePosition;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.Real_WorldAbsolutePosition = input.customInterpolators.Real_WorldAbsolutePosition;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "FullScreenDebug"
            Tags
            {
                "LightMode" = "FullScreenDebug"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest LEqual
        ZWrite Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        #pragma multi_compile_local _ KANDRA_SKINNING
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 Real_WorldAbsolutePosition;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_VERTEXID
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0 : TEXCOORD0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint vertexID : VERTEXID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint VertexID;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition : INTERP4;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.positionRWS.xyz = input.positionRWS;
            output.normalWS.xyz = input.normalWS;
            output.Real_WorldAbsolutePosition.xyz = input.Real_WorldAbsolutePosition;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            output.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        // includeSampleSkinBuffer
        #include "Assets/Code/Kandra/ShaderGraphNodes/SampleSkinBuffer.hlsl"
        
        #ifndef PREVENT_REPEAT_SKIN_SAMPLE
        #define PREVENT_REPEAT_SKIN_SAMPLE
        void Sample_Skin_Buffer_float(uint vertexId, out float3 positionOut, out float3 normalOut, out float3 tangentOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        normalOut = 0;
        tangentOut = 0;
        sampleDeform(vertexId, instanceData, positionOut, normalOut, tangentOut);
        }
        #endif
        
        struct Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float
        {
        float3 ObjectSpaceNormal;
        float3 ObjectSpaceTangent;
        float3 ObjectSpacePosition;
        half4 uv0;
        uint VertexID;
        };
        
        void SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float IN, out float3 Position_1, out float3 Normal_2, out float3 Tangent_3)
        {
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = 0;
        Sample_Skin_Buffer_float(IN.VertexID, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3);
        #else
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = IN.ObjectSpacePosition;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = IN.ObjectSpaceNormal;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = IN.ObjectSpaceTangent;
        #endif
        Position_1 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3;
        Normal_2 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3;
        Tangent_3 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3;
        }
        
        #ifndef PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        #define PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        void Sample_Previous_Position_Buffer_float(uint vertexId, out float3 positionOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        SamplePreviousPosition(vertexId, instanceData, positionOut);
        }
        #endif
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float
        {
        uint VertexID;
        };
        
        void SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(float3 _CurrentPosition, Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float IN, out float3 KandraVelocity_0)
        {
        float3 _Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3 = _CurrentPosition;
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        Sample_Previous_Position_Buffer_float(IN.VertexID, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3);
        #else
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        #endif
        float3 _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        Unity_Subtract_float3(_Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3, _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3);
        #if defined(KANDRA_SKINNING)
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        #else
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = float3(0, 0, 0);
        #endif
        KandraVelocity_0 = _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 CustomVelocity;
            float3 Real_WorldAbsolutePosition;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceNormal = IN.ObjectSpaceNormal;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceTangent = IN.ObjectSpaceTangent;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpacePosition = IN.ObjectSpacePosition;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.uv0 = IN.uv0;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.VertexID = IN.VertexID;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd;
            _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd.VertexID = IN.VertexID;
            float3 _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3);
            #endif
            description.Position = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            description.Normal = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            description.Tangent = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            description.CustomVelocity = _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            description.Real_WorldAbsolutePosition = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float SubsurfaceMask;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(IN.Real_WorldAbsolutePosition, float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float, _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float, _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            #else
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float = _SubsurfaceScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            #else
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float;
            Unity_Multiply_float_float(_Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float, _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float, _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_SSSMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.r;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_G_5_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.g;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_B_6_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.b;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_A_7_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float, _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float, _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            Unity_Saturate_float(_Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float, _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_ae3712da060746dab0542f01885e16fb_Out_0_Float = _ThicknessScaleMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float = _ThicknessScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ThicknessMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_R_4_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.r;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.g;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_B_6_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.b;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_A_7_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float;
            Unity_OneMinus_float(_SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float;
            Unity_Lerp_float(_Property_ae3712da060746dab0542f01885e16fb_Out_0_Float, _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float, _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            Unity_Saturate_float(_Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float, _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float);
            #endif
            surface.BaseColor = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            surface.Emission = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.Occlusion = _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float;
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.SubsurfaceMask = _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            surface.TransmissionMask = float(1);
            surface.Thickness = _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.uv0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.VertexID =                                   input.vertexID;
        #endif
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        #include "Assets/Code/Kandra/ShaderGraphNodes/KandraSkinBuffers.hlsl"
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
            uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        
            const AdditionalVertexData additionalVertexData = KANDRA_ADDITIONAL_VERTICES_BUFFER[input.vertexID + instanceData.y];
            input.uv0.x = f16tof32(additionalVertexData.uv & 0x0000FFFF);
            input.uv0.y = f16tof32(additionalVertexData.uv >> 16);
            input.tangentOS.w = additionalVertexData.tangentW;
        #endif
        
            varyings.Real_WorldAbsolutePosition = vertexDescription.Real_WorldAbsolutePosition;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.Real_WorldAbsolutePosition = input.customInterpolators.Real_WorldAbsolutePosition;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.subsurfaceMask =            surfaceDescription.SubsurfaceMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask.xxx;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassFullScreenDebug.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "DepthOnly"
            Tags
            {
                "LightMode" = "DepthOnly"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        AlphaToMask [_AlphaCutoffEnable]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma multi_compile_fragment _ WRITE_DECAL_BUFFER WRITE_RENDERING_LAYER
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        #pragma multi_compile_local _ KANDRA_SKINNING
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 Real_WorldAbsolutePosition;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_VERTEXID
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0 : TEXCOORD0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint vertexID : VERTEXID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint VertexID;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition : INTERP4;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.positionRWS.xyz = input.positionRWS;
            output.normalWS.xyz = input.normalWS;
            output.Real_WorldAbsolutePosition.xyz = input.Real_WorldAbsolutePosition;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            output.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        // includeSampleSkinBuffer
        #include "Assets/Code/Kandra/ShaderGraphNodes/SampleSkinBuffer.hlsl"
        
        #ifndef PREVENT_REPEAT_SKIN_SAMPLE
        #define PREVENT_REPEAT_SKIN_SAMPLE
        void Sample_Skin_Buffer_float(uint vertexId, out float3 positionOut, out float3 normalOut, out float3 tangentOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        normalOut = 0;
        tangentOut = 0;
        sampleDeform(vertexId, instanceData, positionOut, normalOut, tangentOut);
        }
        #endif
        
        struct Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float
        {
        float3 ObjectSpaceNormal;
        float3 ObjectSpaceTangent;
        float3 ObjectSpacePosition;
        half4 uv0;
        uint VertexID;
        };
        
        void SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float IN, out float3 Position_1, out float3 Normal_2, out float3 Tangent_3)
        {
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = 0;
        Sample_Skin_Buffer_float(IN.VertexID, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3);
        #else
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = IN.ObjectSpacePosition;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = IN.ObjectSpaceNormal;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = IN.ObjectSpaceTangent;
        #endif
        Position_1 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3;
        Normal_2 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3;
        Tangent_3 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3;
        }
        
        #ifndef PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        #define PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        void Sample_Previous_Position_Buffer_float(uint vertexId, out float3 positionOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        SamplePreviousPosition(vertexId, instanceData, positionOut);
        }
        #endif
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float
        {
        uint VertexID;
        };
        
        void SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(float3 _CurrentPosition, Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float IN, out float3 KandraVelocity_0)
        {
        float3 _Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3 = _CurrentPosition;
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        Sample_Previous_Position_Buffer_float(IN.VertexID, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3);
        #else
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        #endif
        float3 _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        Unity_Subtract_float3(_Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3, _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3);
        #if defined(KANDRA_SKINNING)
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        #else
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = float3(0, 0, 0);
        #endif
        KandraVelocity_0 = _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 CustomVelocity;
            float3 Real_WorldAbsolutePosition;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceNormal = IN.ObjectSpaceNormal;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceTangent = IN.ObjectSpaceTangent;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpacePosition = IN.ObjectSpacePosition;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.uv0 = IN.uv0;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.VertexID = IN.VertexID;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd;
            _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd.VertexID = IN.VertexID;
            float3 _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3);
            #endif
            description.Position = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            description.Normal = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            description.Tangent = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            description.CustomVelocity = _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            description.Real_WorldAbsolutePosition = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float SubsurfaceMask;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(IN.Real_WorldAbsolutePosition, float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float, _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float, _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            #else
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float = _SubsurfaceScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            #else
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float;
            Unity_Multiply_float_float(_Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float, _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float, _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_SSSMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.r;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_G_5_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.g;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_B_6_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.b;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_A_7_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float, _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float, _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            Unity_Saturate_float(_Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float, _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_ae3712da060746dab0542f01885e16fb_Out_0_Float = _ThicknessScaleMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float = _ThicknessScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ThicknessMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_R_4_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.r;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.g;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_B_6_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.b;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_A_7_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float;
            Unity_OneMinus_float(_SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float;
            Unity_Lerp_float(_Property_ae3712da060746dab0542f01885e16fb_Out_0_Float, _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float, _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            Unity_Saturate_float(_Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float, _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float);
            #endif
            surface.BaseColor = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            surface.Emission = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.Occlusion = _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float;
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.SubsurfaceMask = _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            surface.TransmissionMask = float(1);
            surface.Thickness = _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.uv0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.VertexID =                                   input.vertexID;
        #endif
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        #include "Assets/Code/Kandra/ShaderGraphNodes/KandraSkinBuffers.hlsl"
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
            uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        
            const AdditionalVertexData additionalVertexData = KANDRA_ADDITIONAL_VERTICES_BUFFER[input.vertexID + instanceData.y];
            input.uv0.x = f16tof32(additionalVertexData.uv & 0x0000FFFF);
            input.uv0.y = f16tof32(additionalVertexData.uv >> 16);
            input.tangentOS.w = additionalVertexData.tangentW;
        #endif
        
            varyings.Real_WorldAbsolutePosition = vertexDescription.Real_WorldAbsolutePosition;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.Real_WorldAbsolutePosition = input.customInterpolators.Real_WorldAbsolutePosition;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.subsurfaceMask =            surfaceDescription.SubsurfaceMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask.xxx;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "GBuffer"
            Tags
            {
                "LightMode" = "GBuffer"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest [_ZTestGBuffer]
        Stencil
        {
        WriteMask [_StencilWriteMaskGBuffer]
        Ref [_StencilRefGBuffer]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile_fragment _ RENDERING_LAYERS
        #pragma multi_compile_raytracing _ RENDERING_LAYERS
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma multi_compile _ USE_LEGACY_LIGHTMAPS
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_TRANSMISSION
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_TRANSMISSION
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_ANISOTROPY
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_ANISOTROPY
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_IRIDESCENCE
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_IRIDESCENCE
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_SPECULAR_COLOR
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_SPECULAR_COLOR
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_COLORED_TRANSMISSION
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        #pragma multi_compile_local _ KANDRA_SKINNING
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_GBUFFER
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 Real_WorldAbsolutePosition;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_VERTEXID
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD2
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD2
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0 : TEXCOORD0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv1 : TEXCOORD1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv2 : TEXCOORD2;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint vertexID : VERTEXID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord2;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint VertexID;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord1 : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord2 : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS : INTERP4;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS : INTERP5;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition : INTERP6;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.texCoord1.xyzw = input.texCoord1;
            output.texCoord2.xyzw = input.texCoord2;
            output.positionRWS.xyz = input.positionRWS;
            output.normalWS.xyz = input.normalWS;
            output.Real_WorldAbsolutePosition.xyz = input.Real_WorldAbsolutePosition;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.texCoord1 = input.texCoord1.xyzw;
            output.texCoord2 = input.texCoord2.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            output.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        // includeSampleSkinBuffer
        #include "Assets/Code/Kandra/ShaderGraphNodes/SampleSkinBuffer.hlsl"
        
        #ifndef PREVENT_REPEAT_SKIN_SAMPLE
        #define PREVENT_REPEAT_SKIN_SAMPLE
        void Sample_Skin_Buffer_float(uint vertexId, out float3 positionOut, out float3 normalOut, out float3 tangentOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        normalOut = 0;
        tangentOut = 0;
        sampleDeform(vertexId, instanceData, positionOut, normalOut, tangentOut);
        }
        #endif
        
        struct Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float
        {
        float3 ObjectSpaceNormal;
        float3 ObjectSpaceTangent;
        float3 ObjectSpacePosition;
        half4 uv0;
        uint VertexID;
        };
        
        void SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float IN, out float3 Position_1, out float3 Normal_2, out float3 Tangent_3)
        {
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = 0;
        Sample_Skin_Buffer_float(IN.VertexID, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3);
        #else
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = IN.ObjectSpacePosition;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = IN.ObjectSpaceNormal;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = IN.ObjectSpaceTangent;
        #endif
        Position_1 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3;
        Normal_2 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3;
        Tangent_3 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3;
        }
        
        #ifndef PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        #define PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        void Sample_Previous_Position_Buffer_float(uint vertexId, out float3 positionOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        SamplePreviousPosition(vertexId, instanceData, positionOut);
        }
        #endif
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float
        {
        uint VertexID;
        };
        
        void SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(float3 _CurrentPosition, Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float IN, out float3 KandraVelocity_0)
        {
        float3 _Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3 = _CurrentPosition;
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        Sample_Previous_Position_Buffer_float(IN.VertexID, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3);
        #else
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        #endif
        float3 _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        Unity_Subtract_float3(_Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3, _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3);
        #if defined(KANDRA_SKINNING)
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        #else
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = float3(0, 0, 0);
        #endif
        KandraVelocity_0 = _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 CustomVelocity;
            float3 Real_WorldAbsolutePosition;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceNormal = IN.ObjectSpaceNormal;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceTangent = IN.ObjectSpaceTangent;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpacePosition = IN.ObjectSpacePosition;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.uv0 = IN.uv0;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.VertexID = IN.VertexID;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd;
            _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd.VertexID = IN.VertexID;
            float3 _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3);
            #endif
            description.Position = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            description.Normal = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            description.Tangent = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            description.CustomVelocity = _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            description.Real_WorldAbsolutePosition = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float SubsurfaceMask;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(IN.Real_WorldAbsolutePosition, float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float, _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float, _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            #else
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float = _SubsurfaceScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            #else
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float;
            Unity_Multiply_float_float(_Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float, _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float, _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_SSSMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.r;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_G_5_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.g;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_B_6_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.b;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_A_7_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float, _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float, _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            Unity_Saturate_float(_Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float, _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_ae3712da060746dab0542f01885e16fb_Out_0_Float = _ThicknessScaleMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float = _ThicknessScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ThicknessMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_R_4_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.r;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.g;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_B_6_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.b;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_A_7_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float;
            Unity_OneMinus_float(_SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float;
            Unity_Lerp_float(_Property_ae3712da060746dab0542f01885e16fb_Out_0_Float, _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float, _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            Unity_Saturate_float(_Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float, _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float);
            #endif
            surface.BaseColor = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            surface.Emission = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.Occlusion = _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float;
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.SubsurfaceMask = _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            surface.TransmissionMask = float(1);
            surface.Thickness = _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            #if defined(KEYWORD_PERMUTATION_0)
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            #endif
            #if defined(KEYWORD_PERMUTATION_1)
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            #endif
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.uv0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.VertexID =                                   input.vertexID;
        #endif
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        #include "Assets/Code/Kandra/ShaderGraphNodes/KandraSkinBuffers.hlsl"
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
            uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        
            const AdditionalVertexData additionalVertexData = KANDRA_ADDITIONAL_VERTICES_BUFFER[input.vertexID + instanceData.y];
            input.uv0.x = f16tof32(additionalVertexData.uv & 0x0000FFFF);
            input.uv0.y = f16tof32(additionalVertexData.uv >> 16);
            input.tangentOS.w = additionalVertexData.tangentW;
        #endif
        
            varyings.Real_WorldAbsolutePosition = vertexDescription.Real_WorldAbsolutePosition;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord1 =                  input.texCoord1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord2 =                  input.texCoord2;
        #endif
        
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.Real_WorldAbsolutePosition = input.customInterpolators.Real_WorldAbsolutePosition;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.subsurfaceMask =            surfaceDescription.SubsurfaceMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask.xxx;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
        #endif
        
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "Forward"
            Tags
            {
                "LightMode" = "Forward"
            }
        
            // Render State
            Cull [_CullModeForward]
        Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
        Blend 1 One OneMinusSrcAlpha
        Blend 2 One [_DstBlend2]
        Blend 3 One [_DstBlend2]
        Blend 4 One OneMinusSrcAlpha
        ZTest [_ZTestDepthEqualForOpaque]
        ZWrite [_ZWrite]
        ColorMask [_ColorMaskTransparentVelOne] 1
        ColorMask [_ColorMaskTransparentVelTwo] 2
        Stencil
        {
        WriteMask [_StencilWriteMask]
        Ref [_StencilRef]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma multi_compile _ USE_LEGACY_LIGHTMAPS
        #pragma multi_compile_fragment PUNCTUAL_SHADOW_LOW PUNCTUAL_SHADOW_MEDIUM PUNCTUAL_SHADOW_HIGH
        #pragma multi_compile_fragment DIRECTIONAL_SHADOW_LOW DIRECTIONAL_SHADOW_MEDIUM DIRECTIONAL_SHADOW_HIGH
        #pragma multi_compile_fragment AREA_SHADOW_MEDIUM AREA_SHADOW_HIGH
        #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
        #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_TRANSMISSION
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_TRANSMISSION
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_ANISOTROPY
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_ANISOTROPY
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_IRIDESCENCE
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_IRIDESCENCE
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_SPECULAR_COLOR
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_SPECULAR_COLOR
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_COLORED_TRANSMISSION
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        #pragma multi_compile_local _ KANDRA_SKINNING
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_FORWARD
        #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING 1
        #define HAS_LIGHTLOOP 1
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SHADER_LIT 1
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 Real_WorldAbsolutePosition;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_VERTEXID
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD2
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD2
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0 : TEXCOORD0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv1 : TEXCOORD1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv2 : TEXCOORD2;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint vertexID : VERTEXID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord2;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint VertexID;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord1 : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord2 : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS : INTERP4;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS : INTERP5;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition : INTERP6;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.texCoord1.xyzw = input.texCoord1;
            output.texCoord2.xyzw = input.texCoord2;
            output.positionRWS.xyz = input.positionRWS;
            output.normalWS.xyz = input.normalWS;
            output.Real_WorldAbsolutePosition.xyz = input.Real_WorldAbsolutePosition;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.texCoord1 = input.texCoord1.xyzw;
            output.texCoord2 = input.texCoord2.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            output.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        // includeSampleSkinBuffer
        #include "Assets/Code/Kandra/ShaderGraphNodes/SampleSkinBuffer.hlsl"
        
        #ifndef PREVENT_REPEAT_SKIN_SAMPLE
        #define PREVENT_REPEAT_SKIN_SAMPLE
        void Sample_Skin_Buffer_float(uint vertexId, out float3 positionOut, out float3 normalOut, out float3 tangentOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        normalOut = 0;
        tangentOut = 0;
        sampleDeform(vertexId, instanceData, positionOut, normalOut, tangentOut);
        }
        #endif
        
        struct Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float
        {
        float3 ObjectSpaceNormal;
        float3 ObjectSpaceTangent;
        float3 ObjectSpacePosition;
        half4 uv0;
        uint VertexID;
        };
        
        void SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float IN, out float3 Position_1, out float3 Normal_2, out float3 Tangent_3)
        {
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = 0;
        Sample_Skin_Buffer_float(IN.VertexID, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3);
        #else
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = IN.ObjectSpacePosition;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = IN.ObjectSpaceNormal;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = IN.ObjectSpaceTangent;
        #endif
        Position_1 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3;
        Normal_2 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3;
        Tangent_3 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3;
        }
        
        #ifndef PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        #define PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        void Sample_Previous_Position_Buffer_float(uint vertexId, out float3 positionOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        SamplePreviousPosition(vertexId, instanceData, positionOut);
        }
        #endif
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float
        {
        uint VertexID;
        };
        
        void SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(float3 _CurrentPosition, Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float IN, out float3 KandraVelocity_0)
        {
        float3 _Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3 = _CurrentPosition;
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        Sample_Previous_Position_Buffer_float(IN.VertexID, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3);
        #else
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        #endif
        float3 _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        Unity_Subtract_float3(_Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3, _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3);
        #if defined(KANDRA_SKINNING)
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        #else
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = float3(0, 0, 0);
        #endif
        KandraVelocity_0 = _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 CustomVelocity;
            float3 Real_WorldAbsolutePosition;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceNormal = IN.ObjectSpaceNormal;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceTangent = IN.ObjectSpaceTangent;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpacePosition = IN.ObjectSpacePosition;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.uv0 = IN.uv0;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.VertexID = IN.VertexID;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd;
            _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd.VertexID = IN.VertexID;
            float3 _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3);
            #endif
            description.Position = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            description.Normal = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            description.Tangent = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            description.CustomVelocity = _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            description.Real_WorldAbsolutePosition = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float SubsurfaceMask;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(IN.Real_WorldAbsolutePosition, float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float, _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float, _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            #else
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float = _SubsurfaceScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            #else
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float;
            Unity_Multiply_float_float(_Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float, _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float, _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_SSSMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.r;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_G_5_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.g;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_B_6_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.b;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_A_7_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float, _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float, _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            Unity_Saturate_float(_Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float, _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_ae3712da060746dab0542f01885e16fb_Out_0_Float = _ThicknessScaleMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float = _ThicknessScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ThicknessMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_R_4_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.r;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.g;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_B_6_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.b;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_A_7_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float;
            Unity_OneMinus_float(_SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float;
            Unity_Lerp_float(_Property_ae3712da060746dab0542f01885e16fb_Out_0_Float, _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float, _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            Unity_Saturate_float(_Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float, _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float);
            #endif
            surface.BaseColor = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            surface.Emission = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.Occlusion = _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float;
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.SubsurfaceMask = _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            surface.TransmissionMask = float(1);
            surface.Thickness = _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            #if defined(KEYWORD_PERMUTATION_0)
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            #endif
            #if defined(KEYWORD_PERMUTATION_1)
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            #endif
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.uv0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.VertexID =                                   input.vertexID;
        #endif
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        #include "Assets/Code/Kandra/ShaderGraphNodes/KandraSkinBuffers.hlsl"
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
            uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        
            const AdditionalVertexData additionalVertexData = KANDRA_ADDITIONAL_VERTICES_BUFFER[input.vertexID + instanceData.y];
            input.uv0.x = f16tof32(additionalVertexData.uv & 0x0000FFFF);
            input.uv0.y = f16tof32(additionalVertexData.uv >> 16);
            input.tangentOS.w = additionalVertexData.tangentW;
        #endif
        
            varyings.Real_WorldAbsolutePosition = vertexDescription.Real_WorldAbsolutePosition;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord1 =                  input.texCoord1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord2 =                  input.texCoord2;
        #endif
        
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.Real_WorldAbsolutePosition = input.customInterpolators.Real_WorldAbsolutePosition;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.subsurfaceMask =            surfaceDescription.SubsurfaceMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask.xxx;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
        #endif
        
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "RayTracingPrepass"
            Tags
            {
                "LightMode" = "RayTracingPrepass"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One Zero
        ZWrite On
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        #pragma multi_compile_local _ KANDRA_SKINNING
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_CONSTANT
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 Real_WorldAbsolutePosition;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_VERTEXID
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0 : TEXCOORD0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint vertexID : VERTEXID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint VertexID;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 positionRWS : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 normalWS : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 Real_WorldAbsolutePosition : INTERP4;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.positionRWS.xyz = input.positionRWS;
            output.normalWS.xyz = input.normalWS;
            output.Real_WorldAbsolutePosition.xyz = input.Real_WorldAbsolutePosition;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.normalWS = input.normalWS.xyz;
            output.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED || defined(VARYINGS_NEED_INSTANCEID)
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        // includeSampleSkinBuffer
        #include "Assets/Code/Kandra/ShaderGraphNodes/SampleSkinBuffer.hlsl"
        
        #ifndef PREVENT_REPEAT_SKIN_SAMPLE
        #define PREVENT_REPEAT_SKIN_SAMPLE
        void Sample_Skin_Buffer_float(uint vertexId, out float3 positionOut, out float3 normalOut, out float3 tangentOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        normalOut = 0;
        tangentOut = 0;
        sampleDeform(vertexId, instanceData, positionOut, normalOut, tangentOut);
        }
        #endif
        
        struct Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float
        {
        float3 ObjectSpaceNormal;
        float3 ObjectSpaceTangent;
        float3 ObjectSpacePosition;
        half4 uv0;
        uint VertexID;
        };
        
        void SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float IN, out float3 Position_1, out float3 Normal_2, out float3 Tangent_3)
        {
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = 0;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = 0;
        Sample_Skin_Buffer_float(IN.VertexID, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3, _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3);
        #else
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3 = IN.ObjectSpacePosition;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3 = IN.ObjectSpaceNormal;
        float3 _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3 = IN.ObjectSpaceTangent;
        #endif
        Position_1 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedPosition_0_Vector3;
        Normal_2 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedNormal_1_Vector3;
        Tangent_3 = _Sampleskinbuffer_23e5bcb6cf7d4fc598340cf9e8634601_DeformedTangent_2_Vector3;
        }
        
        #ifndef PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        #define PREVENT_REPEAT_PREVIOUS_POSITION_SAMPLE
        void Sample_Previous_Position_Buffer_float(uint vertexId, out float3 positionOut)
        {
        uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        positionOut = 0;
        SamplePreviousPosition(vertexId, instanceData, positionOut);
        }
        #endif
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float
        {
        uint VertexID;
        };
        
        void SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(float3 _CurrentPosition, Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float IN, out float3 KandraVelocity_0)
        {
        float3 _Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3 = _CurrentPosition;
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        Sample_Previous_Position_Buffer_float(IN.VertexID, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3);
        #else
        float3 _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3 = 0;
        #endif
        float3 _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        Unity_Subtract_float3(_Property_7551edbe49b041df87e98dfe889ee2e0_Out_0_Vector3, _Kandrasamplepreviousposition_53ad94f9b3fc46f8a2ee62984441c581_PreviousPosition_0_Vector3, _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3);
        #if defined(KANDRA_SKINNING)
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = _Subtract_dd691e547bcc4f8fbc2b1eb48b55023a_Out_2_Vector3;
        #else
        float3 _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3 = float3(0, 0, 0);
        #endif
        KandraVelocity_0 = _KANDRASKINNING_e733d92bdc214d3d922fa04f2017cd05_Out_0_Vector3;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 CustomVelocity;
            float3 Real_WorldAbsolutePosition;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceNormal = IN.ObjectSpaceNormal;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpaceTangent = IN.ObjectSpaceTangent;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.ObjectSpacePosition = IN.ObjectSpacePosition;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.uv0 = IN.uv0;
            _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6.VertexID = IN.VertexID;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            float3 _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            SG_KandraVertexSubGraph_b893b756a94bbc24ea1c10938e20d1d2_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3, _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd;
            _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd.VertexID = IN.VertexID;
            float3 _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            SG_KandraVelocitySubGraph_1c0f9e832745ce14da01f179b148f56c_float(_KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd, _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3);
            #endif
            description.Position = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            description.Normal = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Normal_2_Vector3;
            description.Tangent = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Tangent_3_Vector3;
            description.CustomVelocity = _KandraVelocitySubGraph_b9f26853e3e24e84bf2bf58051bf4acd_KandraVelocity_0_Vector3;
            description.Real_WorldAbsolutePosition = _KandraVertexSubGraph_26f66138f53f41f99ca6253557f45ba6_Position_1_Vector3;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float SubsurfaceMask;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(IN.Real_WorldAbsolutePosition, float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float, _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float, _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            #else
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float = _SubsurfaceScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            #else
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float;
            Unity_Multiply_float_float(_Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float, _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float, _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_SSSMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.r;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_G_5_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.g;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_B_6_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.b;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_A_7_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float, _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float, _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            Unity_Saturate_float(_Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float, _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_ae3712da060746dab0542f01885e16fb_Out_0_Float = _ThicknessScaleMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float = _ThicknessScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ThicknessMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_R_4_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.r;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.g;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_B_6_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.b;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_A_7_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float;
            Unity_OneMinus_float(_SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float;
            Unity_Lerp_float(_Property_ae3712da060746dab0542f01885e16fb_Out_0_Float, _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float, _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            Unity_Saturate_float(_Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float, _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float);
            #endif
            surface.BaseColor = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            surface.Emission = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.Occlusion = _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float;
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.SubsurfaceMask = _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            surface.TransmissionMask = float(1);
            surface.Thickness = _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.uv0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.VertexID =                                   input.vertexID;
        #endif
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        #include "Assets/Code/Kandra/ShaderGraphNodes/KandraSkinBuffers.hlsl"
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
        #if (defined(UNITY_DOTS_INSTANCING_ENABLED) && defined(KANDRA_SKINNING))
            uint2 instanceData = asuint(UNITY_ACCESS_HYBRID_INSTANCED_PROP(_InstanceData, float2));
        
            const AdditionalVertexData additionalVertexData = KANDRA_ADDITIONAL_VERTICES_BUFFER[input.vertexID + instanceData.y];
            input.uv0.x = f16tof32(additionalVertexData.uv & 0x0000FFFF);
            input.uv0.y = f16tof32(additionalVertexData.uv >> 16);
            input.tangentOS.w = additionalVertexData.tangentW;
        #endif
        
            varyings.Real_WorldAbsolutePosition = vertexDescription.Real_WorldAbsolutePosition;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #if UNITY_ANY_INSTANCING_ENABLED
        #else
        #endif
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.Real_WorldAbsolutePosition = input.Real_WorldAbsolutePosition;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.Real_WorldAbsolutePosition = input.customInterpolators.Real_WorldAbsolutePosition;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.subsurfaceMask =            surfaceDescription.SubsurfaceMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask.xxx;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassConstant.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="AlphaTest+25"
            "DisableBatching"="False"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "IndirectDXR"
            Tags
            {
                "LightMode" = "IndirectDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma multi_compile _ MULTI_BOUNCE_INDIRECT
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_raytracing DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_raytracing _ DECAL_SURFACE_GRADIENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_TRANSMISSION
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_TRANSMISSION
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_ANISOTROPY
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_ANISOTROPY
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_IRIDESCENCE
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_IRIDESCENCE
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_SPECULAR_COLOR
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_SPECULAR_COLOR
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_COLORED_TRANSMISSION
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_RAYTRACING_INDIRECT
        #define PUNCTUAL_SHADOW_LOW
        #define DIRECTIONAL_SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define LIGHTLOOP_DISABLE_TILE_AND_CLUSTER 1
        #define PATH_TRACING_CLUSTERED_DECALS 1
        #define HAS_LIGHTLOOP 1
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD2
        #endif
        
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD2
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRayTracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float SubsurfaceMask;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float((float3(float4(0,0,0,0).xyz)), float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float, _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float, _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            #else
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float = _SubsurfaceScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            #else
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float;
            Unity_Multiply_float_float(_Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float, _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float, _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_SSSMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.r;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_G_5_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.g;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_B_6_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.b;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_A_7_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float, _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float, _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            Unity_Saturate_float(_Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float, _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_ae3712da060746dab0542f01885e16fb_Out_0_Float = _ThicknessScaleMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float = _ThicknessScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ThicknessMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_R_4_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.r;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.g;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_B_6_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.b;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_A_7_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float;
            Unity_OneMinus_float(_SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float;
            Unity_Lerp_float(_Property_ae3712da060746dab0542f01885e16fb_Out_0_Float, _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float, _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            Unity_Saturate_float(_Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float, _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float);
            #endif
            surface.BaseColor = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            surface.Emission = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.Occlusion = _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float;
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.SubsurfaceMask = _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            surface.TransmissionMask = float(1);
            surface.Thickness = _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.subsurfaceMask =            surfaceDescription.SubsurfaceMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask.xxx;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingIndirect.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "VisibilityDXR"
            Tags
            {
                "LightMode" = "VisibilityDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma multi_compile _ TRANSPARENT_COLOR_SHADOW
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_RAYTRACING_VISIBILITY
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRayTracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float SubsurfaceMask;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float((float3(float4(0,0,0,0).xyz)), float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float, _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float, _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            #else
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float = _SubsurfaceScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            #else
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float;
            Unity_Multiply_float_float(_Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float, _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float, _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_SSSMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.r;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_G_5_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.g;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_B_6_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.b;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_A_7_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float, _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float, _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            Unity_Saturate_float(_Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float, _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_ae3712da060746dab0542f01885e16fb_Out_0_Float = _ThicknessScaleMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float = _ThicknessScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ThicknessMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_R_4_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.r;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.g;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_B_6_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.b;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_A_7_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float;
            Unity_OneMinus_float(_SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float;
            Unity_Lerp_float(_Property_ae3712da060746dab0542f01885e16fb_Out_0_Float, _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float, _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            Unity_Saturate_float(_Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float, _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float);
            #endif
            surface.BaseColor = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            surface.Emission = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.Occlusion = _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float;
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.SubsurfaceMask = _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            surface.TransmissionMask = float(1);
            surface.Thickness = _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.subsurfaceMask =            surfaceDescription.SubsurfaceMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask.xxx;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingVisibility.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "ForwardDXR"
            Tags
            {
                "LightMode" = "ForwardDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_TRANSMISSION
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_TRANSMISSION
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_ANISOTROPY
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_ANISOTROPY
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_IRIDESCENCE
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_IRIDESCENCE
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_SPECULAR_COLOR
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_SPECULAR_COLOR
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_COLORED_TRANSMISSION
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_RAYTRACING_FORWARD
        #define PUNCTUAL_SHADOW_LOW
        #define DIRECTIONAL_SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define HAS_LIGHTLOOP 1
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD2
        #endif
        
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD2
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRayTracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float SubsurfaceMask;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float((float3(float4(0,0,0,0).xyz)), float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float, _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float, _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            #else
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float = _SubsurfaceScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            #else
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float;
            Unity_Multiply_float_float(_Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float, _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float, _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_SSSMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.r;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_G_5_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.g;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_B_6_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.b;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_A_7_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float, _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float, _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            Unity_Saturate_float(_Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float, _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_ae3712da060746dab0542f01885e16fb_Out_0_Float = _ThicknessScaleMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float = _ThicknessScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ThicknessMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_R_4_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.r;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.g;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_B_6_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.b;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_A_7_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float;
            Unity_OneMinus_float(_SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float;
            Unity_Lerp_float(_Property_ae3712da060746dab0542f01885e16fb_Out_0_Float, _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float, _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            Unity_Saturate_float(_Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float, _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float);
            #endif
            surface.BaseColor = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            surface.Emission = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.Occlusion = _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float;
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.SubsurfaceMask = _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            surface.TransmissionMask = float(1);
            surface.Thickness = _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.subsurfaceMask =            surfaceDescription.SubsurfaceMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask.xxx;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "GBufferDXR"
            Tags
            {
                "LightMode" = "GBufferDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma multi_compile _ MINIMAL_GBUFFER
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_raytracing DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_raytracing _ DECAL_SURFACE_GRADIENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_TRANSMISSION
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_TRANSMISSION
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_ANISOTROPY
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_ANISOTROPY
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_IRIDESCENCE
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_IRIDESCENCE
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_SPECULAR_COLOR
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_SPECULAR_COLOR
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_COLORED_TRANSMISSION
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_RAYTRACING_GBUFFER
        #define PUNCTUAL_SHADOW_LOW
        #define DIRECTIONAL_SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define LIGHTLOOP_DISABLE_TILE_AND_CLUSTER 1
        #define PATH_TRACING_CLUSTERED_DECALS 1
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD2
        #endif
        
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD2
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Deferred/RaytracingIntersectonGBuffer.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/StandardLit/StandardLit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRayTracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float SubsurfaceMask;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float((float3(float4(0,0,0,0).xyz)), float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float, _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float, _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            #else
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float = _SubsurfaceScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            #else
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float;
            Unity_Multiply_float_float(_Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float, _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float, _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_SSSMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.r;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_G_5_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.g;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_B_6_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.b;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_A_7_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float, _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float, _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            Unity_Saturate_float(_Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float, _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_ae3712da060746dab0542f01885e16fb_Out_0_Float = _ThicknessScaleMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float = _ThicknessScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ThicknessMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_R_4_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.r;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.g;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_B_6_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.b;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_A_7_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float;
            Unity_OneMinus_float(_SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float;
            Unity_Lerp_float(_Property_ae3712da060746dab0542f01885e16fb_Out_0_Float, _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float, _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            Unity_Saturate_float(_Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float, _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float);
            #endif
            surface.BaseColor = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            surface.Emission = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.Occlusion = _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float;
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.SubsurfaceMask = _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            surface.TransmissionMask = float(1);
            surface.Thickness = _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.subsurfaceMask =            surfaceDescription.SubsurfaceMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask.xxx;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "DebugDXR"
            Tags
            {
                "LightMode" = "DebugDXR"
            }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        	#include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRayTracingDebug.hlsl"
        
            ENDHLSL
        }
        Pass
        {
            Name "PathTracingDXR"
            Tags
            {
                "LightMode" = "PathTracingDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_raytracing DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_raytracing _ DECAL_SURFACE_GRADIENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_TRANSMISSION
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_TRANSMISSION
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_ANISOTROPY
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_ANISOTROPY
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_IRIDESCENCE
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_IRIDESCENCE
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_SPECULAR_COLOR
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_SPECULAR_COLOR
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_COLORED_TRANSMISSION
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_PATH_TRACING
        #define PUNCTUAL_SHADOW_LOW
        #define DIRECTIONAL_SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_PATHTRACED
        #define LIGHTLOOP_DISABLE_TILE_AND_CLUSTER 1
        #define PATH_TRACING_CLUSTERED_DECALS 1
        #define HAS_LIGHTLOOP 1
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD2
        #endif
        
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD2
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingLightCluster.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitPathTracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float SubsurfaceMask;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float((float3(float4(0,0,0,0).xyz)), float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float, _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float, _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            #else
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float = _SubsurfaceScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            #else
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float;
            Unity_Multiply_float_float(_Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float, _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float, _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_SSSMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.r;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_G_5_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.g;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_B_6_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.b;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_A_7_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float, _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float, _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            Unity_Saturate_float(_Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float, _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_ae3712da060746dab0542f01885e16fb_Out_0_Float = _ThicknessScaleMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float = _ThicknessScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ThicknessMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_R_4_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.r;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.g;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_B_6_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.b;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_A_7_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float;
            Unity_OneMinus_float(_SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float;
            Unity_Lerp_float(_Property_ae3712da060746dab0542f01885e16fb_Out_0_Float, _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float, _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            Unity_Saturate_float(_Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float, _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float);
            #endif
            surface.BaseColor = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            surface.Emission = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.Occlusion = _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float;
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.SubsurfaceMask = _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            surface.TransmissionMask = float(1);
            surface.Thickness = _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.subsurfaceMask =            surfaceDescription.SubsurfaceMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask.xxx;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassPathTracing.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "SubSurfaceDXR"
            Tags
            {
                "LightMode" = "SubSurfaceDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_TRANSMISSION
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_TRANSMISSION
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_ANISOTROPY
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_ANISOTROPY
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_IRIDESCENCE
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_IRIDESCENCE
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_SPECULAR_COLOR
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_SPECULAR_COLOR
        #pragma shader_feature_local_fragment _MATERIAL_FEATURE_COLORED_TRANSMISSION
        #pragma shader_feature_local_raytracing _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #pragma shader_feature_local _ BOOLEAN_IS_HEAD_ON
        
        #if defined(BOOLEAN_IS_HEAD_ON)
            #define KEYWORD_PERMUTATION_0
        #else
            #define KEYWORD_PERMUTATION_1
        #endif
        
        
            // Defines
            #define SHADERPASS SHADERPASS_RAYTRACING_SUB_SURFACE
        #define PUNCTUAL_SHADOW_LOW
        #define DIRECTIONAL_SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define SUPPORT_GLOBAL_MIP_BIAS 1
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl" // Required before including properties as it defines UNITY_TEXTURE_STREAMING_DEBUG_VARS
            // Always include Shader Graph version
            // Always include last to avoid double macros
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define ATTRIBUTES_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define VARYINGS_NEED_TEXCOORD2
        #endif
        
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define FRAG_INPUTS_USE_TEXCOORD2
        #endif
        
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ADD_CUSTOM_VELOCITY
        #endif
        
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            // Colored Transmission doesn't support clear coat
            #undef _MATERIAL_FEATURE_CLEAR_COAT
        #endif
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            // See Lit.shader
            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float2 _InstanceData;
        float4 _MorphDiffuseMap_TexelSize;
        float4 _DiffuseMap_TexelSize;
        float4 _MorphNormalMap_TexelSize;
        float _TattooEmissiveB;
        float4 _MorphMaskMap_TexelSize;
        float _TattooEmissiveC;
        float _TattooEmissiveD;
        float4 _TattooColorB;
        float4 _TattooColorC;
        float4 _TattooColorD;
        float4 _DiffuseColor;
        float4 _MaskMap_TexelSize;
        float _TattooNormalB;
        float _TattooNormalC;
        float _TattooNormalD;
        float _SmoothnessPower;
        float _SmoothnessMin;
        float _SmoothnessMax;
        float4 _NormalMap_TexelSize;
        float _NormalStrength;
        float4 _MicroNormalMap_TexelSize;
        float _MicroNormalStrength;
        float _MicroNormalTiling;
        float4 _SSSMap_TexelSize;
        float _SubsurfaceScale;
        float4 _ThicknessMap_TexelSize;
        float _ThicknessScale;
        float _ThicknessScaleMin;
        float4 _RGBAMask_TexelSize;
        float _MicroSmoothnessMod;
        float _RSmoothnessMod;
        float _GSmoothnessMod;
        float _BSmoothnessMod;
        float _ASmoothnessMod;
        float _UnmaskedSmoothnessMod;
        float _RScatterScale;
        float _GScatterScale;
        float _BScatterScale;
        float _AScatterScale;
        float _UnmaskedScatterScale;
        float4 _ColorBlendMap_TexelSize;
        float _ColorBlendStrength;
        float4 _NormalBlendMap_TexelSize;
        float _NormalBlendStrength;
        float4 _MNAOMap_TexelSize;
        float _MouthCavityAO;
        float _NostrilCavityAO;
        float _LipsCavityAO;
        float4 _CFULCMask_TexelSize;
        float _CheekSmoothnessMod;
        float _ForeheadSmoothnessMod;
        float _UpperLipSmoothnessMod;
        float _ChinSmoothnessMod;
        float _CheekScatterScale;
        float _ForeheadScatterScale;
        float _UpperLipScatterScale;
        float _ChinScatterScale;
        float4 _EarNeckMask_TexelSize;
        float _EarSmoothnessMod;
        float _NeckSmoothnessMod;
        float _EarScatterScale;
        float _NeckScatterScale;
        float4 _TattooMaskMap_TexelSize;
        float4 _TattooColorA;
        float _TattooEmissiveA;
        float4 _TattooNormalMap_TexelSize;
        float _TattooNormalA;
        float _TattooWyrdlook;
        float _Morph;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        UNITY_TEXTURE_STREAMING_DEBUG_VARS;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        float _MaterialID;
        float _MaterialTypeMask;
        CBUFFER_END
        
        #if defined(DOTS_INSTANCING_ON)
        // DOTS instancing definitions
        UNITY_DOTS_INSTANCING_START(MaterialPropertyMetadata)
            UNITY_DOTS_INSTANCED_PROP_OVERRIDE_SUPPORTED(float2, _InstanceData)
        UNITY_DOTS_INSTANCING_END(MaterialPropertyMetadata)
        // DOTS instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_DOTS_INSTANCED_PROP_WITH_DEFAULT(type, var)
        #elif defined(UNITY_INSTANCING_ENABLED)
        // Unity instancing definitions
        UNITY_INSTANCING_BUFFER_START(SGPerInstanceData)
            UNITY_DEFINE_INSTANCED_PROP(float2, _InstanceData)
        UNITY_INSTANCING_BUFFER_END(SGPerInstanceData)
        // Unity instancing usage macros
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) UNITY_ACCESS_INSTANCED_PROP(SGPerInstanceData, var)
        #else
        #define UNITY_ACCESS_HYBRID_INSTANCED_PROP(var, type) var
        #endif
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_MorphDiffuseMap);
        SAMPLER(sampler_MorphDiffuseMap);
        TEXTURE2D(_DiffuseMap);
        SAMPLER(sampler_DiffuseMap);
        TEXTURE2D(_MorphNormalMap);
        SAMPLER(sampler_MorphNormalMap);
        TEXTURE2D(_MorphMaskMap);
        SAMPLER(sampler_MorphMaskMap);
        float _TattooEmissivePulseSpeed;
        TEXTURE2D(_MaskMap);
        SAMPLER(sampler_MaskMap);
        float _AOStrength;
        TEXTURE2D(_NormalMap);
        SAMPLER(sampler_NormalMap);
        TEXTURE2D(_MicroNormalMap);
        SAMPLER(sampler_MicroNormalMap);
        TEXTURE2D(_SSSMap);
        SAMPLER(sampler_SSSMap);
        TEXTURE2D(_ThicknessMap);
        SAMPLER(sampler_ThicknessMap);
        TEXTURE2D(_RGBAMask);
        SAMPLER(sampler_RGBAMask);
        TEXTURE2D(_ColorBlendMap);
        SAMPLER(sampler_ColorBlendMap);
        TEXTURE2D(_NormalBlendMap);
        SAMPLER(sampler_NormalBlendMap);
        TEXTURE2D(_MNAOMap);
        SAMPLER(sampler_MNAOMap);
        TEXTURE2D(_CFULCMask);
        SAMPLER(sampler_CFULCMask);
        TEXTURE2D(_EarNeckMask);
        SAMPLER(sampler_EarNeckMask);
        TEXTURE2D(_TattooMaskMap);
        SAMPLER(sampler_TattooMaskMap);
        TEXTURE2D(_TattooNormalMap);
        SAMPLER(sampler_TattooNormalMap);
        float _TattooEmissiveFresnel;
        float _TattooEmissivePulseClamp;
        float _TattooEmissiveFresnelPower;
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/SubSurface/RayTracingIntersectionSubSurface.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRayTracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include_with_pragmas "Assets/Shaders/TG/SubGraphs/External/NoiseShader/HLSL/ClassicNoise3D.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 WorldSpaceViewDirection;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
             float3 TimeParameters;
            #endif
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        struct Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float
        {
        };
        
        void SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float(float3 Vector3_7940555B, float Vector1_1B8B9078, Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float IN, out float Value_0)
        {
        float3 _Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3 = Vector3_7940555B;
        float _Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float = Vector1_1B8B9078;
        float3 _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Property_44999cc87708de82a26b39ae1da975ec_Out_0_Vector3, (_Property_dad5add45a7fa785be976f925bc5a5da_Out_0_Float.xxx), _Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3);
        float _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float;
        PerlinNoise3D_float(_Multiply_1d17f1db9ddb2d8481679237f2442ac2_Out_2_Vector3, _PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float);
        float _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        Unity_Remap_float(_PerlinNoise3DCustomFunction_1d714aea6ba122808f5efcabfce18252_Out_1_Float, float2 (-1.15, 1.15), float2 (0, 1), _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float);
        Value_0 = _Remap_af84172fa44e378facaf1384fe5d8f4d_Out_3_Float;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
        {
            Out = smoothstep(Edge1, Edge2, In);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        struct Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float
        {
        };
        
        void SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(float _Input, float _Intensity, float _Feather, Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float IN, out float Out_0)
        {
        float _Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float = _Intensity;
        float _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float;
        Unity_OneMinus_float(_Property_18ed6a9185b343cf9f80d3a8a8416210_Out_0_Float, _OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float);
        float _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float = _Feather;
        float _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float;
        Unity_Subtract_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float);
        float _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float;
        Unity_Add_float(_OneMinus_20972dbd1b8843af9f77ce50b29ea3b7_Out_1_Float, _Property_a8c639b8f3a54a2f8e191c2889df2008_Out_0_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float);
        float _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float = _Input;
        float _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float;
        Unity_Smoothstep_float(_Subtract_228e2806bfc34f179a7338293a53eb56_Out_2_Float, _Add_ef47b5e9935c45f291b4a48455173de0_Out_2_Float, _Property_cbe325c2e8984f1ab9fd59c66c789598_Out_0_Float, _Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float);
        float _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        Unity_Saturate_float(_Smoothstep_43cba33f3624481298e9abb62f998dc3_Out_3_Float, _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float);
        Out_0 = _Saturate_14e78e2bcf134d278ac0b22c7808d85c_Out_1_Float;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
        {
            float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
            float4 result2 = 2.0 * Base * Blend;
            float4 zeroOrOne = step(Base, 0.5);
            Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
            Out = lerp(Base, Out, Opacity);
        }
        
        void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
        {
            Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        float3 Unity_HDRP_GetEmissionHDRColor_float(float3 ldrColor, float luminanceIntensity, float exposureWeight)
        {
        float3 hdrColor = ldrColor * luminanceIntensity;
        
        #ifdef SHADERGRAPH_PREVIEW
        float inverseExposureMultiplier = 1.0;
        #else
        float inverseExposureMultiplier = GetInverseCurrentExposureMultiplier();
        #endif
        
        // Inverse pre-expose using _EmissiveExposureWeight weight
        hdrColor = lerp(hdrColor * inverseExposureMultiplier, hdrColor, exposureWeight);
        return hdrColor;
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
        {
            Out = SafeNormalize(float3(A.rg + B.rg, A.b * B.b));
        }
        
        struct Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceViewDirection;
        half4 uv0;
        float3 TimeParameters;
        };
        
        void SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float(float3 _BaseColor, UnityTexture2D _MaskMap, UnityTexture2D _NormalMap, UnitySamplerState _SamplerState, float4 _TattooColorA, float4 _TattooColorB, float4 _TattooColorC, float4 _TattooColorD, float _EmissiveStrengthA, float _EmissiveStrengthB, float _EmissiveStrengthC, float _EmissiveStrengthD, float _EmissiveWyrdlook, float _EmissivePulseSpeed, float _EmissivePulseClamp, float _EmissiveFresnel, float _EmissiveFresnelPower, float _NormalStrengthA, float _NormalStrengthB, float _NormalStrengthC, float _NormalStrengthD, Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float IN, out float3 BaseColor_1, out float3 Emissive_3, out float3 Normal_2)
        {
        float3 _Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3 = _BaseColor;
        float4 _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4 = _TattooColorA;
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[0];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[1];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[2];
        float _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float = _Property_e734f19517114ac0a6794c25d5684931_Out_0_Vector4[3];
        float4 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4;
        float3 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3;
        float2 _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2;
        Unity_Combine_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_R_1_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_G_2_Float, _Split_070b6d35a9fc4ebea6d1aa2ba283a86c_B_3_Float, float(0), _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGBA_4_Vector4, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RG_6_Vector2);
        UnityTexture2D _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D = _MaskMap;
        UnitySamplerState _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState = _SamplerState;
        float4 _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_413a5e14db0840f8a2071393c2b1d43f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.r;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.g;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.b;
        float _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float = _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_RGBA_0_Vector4.a;
        float _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float;
        Unity_Multiply_float_float(_Split_070b6d35a9fc4ebea6d1aa2ba283a86c_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float);
        float3 _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3;
        Unity_Lerp_float3(_Property_f43f5fdf6e114e358b28de8c75733c9b_Out_0_Vector3, _Combine_3dcf6a432f7540b2abbaeb991dd85e74_RGB_5_Vector3, (_Multiply_562927b145f64bc8bebe6b8d3cbe63c8_Out_2_Float.xxx), _Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3);
        float4 _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4 = _TattooColorB;
        float _Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[0];
        float _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[1];
        float _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[2];
        float _Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float = _Property_35d5fcc63f2640f2b51d9d9b702a0a81_Out_0_Vector4[3];
        float4 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4;
        float3 _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3;
        float2 _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2;
        Unity_Combine_float(_Split_86f514b57fe349149bc798b14f12c5c1_R_1_Float, _Split_86f514b57fe349149bc798b14f12c5c1_G_2_Float, _Split_86f514b57fe349149bc798b14f12c5c1_B_3_Float, float(0), _Combine_1d256aad247b4d78b6a67a6303e079d9_RGBA_4_Vector4, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RG_6_Vector2);
        float _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float;
        Unity_Multiply_float_float(_Split_86f514b57fe349149bc798b14f12c5c1_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float);
        float3 _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_1fb14f3a6b2343819c551b1ade18d963_Out_3_Vector3, _Combine_1d256aad247b4d78b6a67a6303e079d9_RGB_5_Vector3, (_Multiply_526ffa37ca454f37a4f8053e3f909cf7_Out_2_Float.xxx), _Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3);
        float4 _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4 = _TattooColorC;
        float _Split_9b63092ce314497080d505b0195d7275_R_1_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[0];
        float _Split_9b63092ce314497080d505b0195d7275_G_2_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[1];
        float _Split_9b63092ce314497080d505b0195d7275_B_3_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[2];
        float _Split_9b63092ce314497080d505b0195d7275_A_4_Float = _Property_0700d13c3f1f45258f891c01ca036ff2_Out_0_Vector4[3];
        float4 _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4;
        float3 _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3;
        float2 _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2;
        Unity_Combine_float(_Split_9b63092ce314497080d505b0195d7275_R_1_Float, _Split_9b63092ce314497080d505b0195d7275_G_2_Float, _Split_9b63092ce314497080d505b0195d7275_B_3_Float, float(0), _Combine_81c143bd111b4d548862212a071b2c62_RGBA_4_Vector4, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RG_6_Vector2);
        float _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float;
        Unity_Multiply_float_float(_Split_9b63092ce314497080d505b0195d7275_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float);
        float3 _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_4f28a11af85149f78baa6913b1538411_Out_3_Vector3, _Combine_81c143bd111b4d548862212a071b2c62_RGB_5_Vector3, (_Multiply_1d6f06ee9aee4e80b8f1d032295b5bdd_Out_2_Float.xxx), _Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3);
        float4 _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4 = _TattooColorD;
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[0];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[1];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[2];
        float _Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float = _Property_e99fd45fd66b4cf3a7c94231711d5ce3_Out_0_Vector4[3];
        float4 _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4;
        float3 _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3;
        float2 _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2;
        Unity_Combine_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_R_1_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_G_2_Float, _Split_e3db8dc7e9854dd3afaba9670a03d279_B_3_Float, float(0), _Combine_c13090b595de42f1aead89ce5bbbafed_RGBA_4_Vector4, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RG_6_Vector2);
        float _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float;
        Unity_Multiply_float_float(_Split_e3db8dc7e9854dd3afaba9670a03d279_A_4_Float, _SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float);
        float3 _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Unity_Lerp_float3(_Lerp_c3a597338fd94bc891fc03ee88dcd168_Out_3_Vector3, _Combine_c13090b595de42f1aead89ce5bbbafed_RGB_5_Vector3, (_Multiply_0aa3950f69f44ffb9339d8f0e03fd04a_Out_2_Float.xxx), _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3);
        float _Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean = _EmissiveWyrdlook;
        float _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float = _EmissiveStrengthA;
        float _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_d11dceb215684cd6afa852c0bd0b2b49_Out_0_Float, _Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float);
        float _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float = _EmissiveStrengthB;
        float _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_4d65f2bccca84a7685b33e069f90bcef_Out_0_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float);
        float _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float;
        Unity_Maximum_float(_Multiply_f9c6c0c69c5f47a49fd51ddabccd896d_Out_2_Float, _Multiply_b9d2c8434c1a4bbc845bb8b732c079ac_Out_2_Float, _Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float);
        float _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float = _EmissiveStrengthC;
        float _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_d8fb51a14a074173a8d2310ea524d8de_Out_0_Float, _Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float);
        float _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float = _EmissiveStrengthD;
        float _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_b0f75c16c4ce483bbfee8c697810efcb_Out_0_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float);
        float _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float;
        Unity_Maximum_float(_Multiply_cbbe2339ea8b4d48a9479d0bdcdb769a_Out_2_Float, _Multiply_bfe212c33f784ccbb2776f0d36e76260_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float);
        float _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float;
        Unity_Maximum_float(_Maximum_fbbf5ccc1be24ee88c6e37f2f5375274_Out_2_Float, _Maximum_a12632eceb1249a8aad0e4b1e7c5c079_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float);
        float _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float = _EmissiveFresnel;
        float _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float;
        Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float);
        float _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float;
        Unity_OneMinus_float(_FresnelEffect_ad5cb662e2954112b3af498435a4d338_Out_3_Float, _OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float);
        float _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float = _EmissiveFresnelPower;
        float _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float;
        Unity_Power_float(_OneMinus_3ac2992e84514b8c8734aff2dcb01430_Out_1_Float, _Property_aa0e46ccb33c4f3e9b71c7218afd65ff_Out_0_Float, _Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float);
        float _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float;
        Unity_Saturate_float(_Power_1246797a497e4658a907032bd57bbaaa_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float);
        float _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float;
        Unity_Multiply_float_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Saturate_013473c77014477991c8458d32bdf044_Out_1_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float);
        float _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float;
        Unity_Lerp_float(_Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Multiply_11380e9a7abf45c0833ed8d74ee1d2ca_Out_2_Float, _Property_5bbaa271845243618e86acc2f3a3b5db_Out_0_Float, _Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float);
        float _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float = _EmissivePulseSpeed;
        float _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float;
        Unity_Multiply_float_float(IN.TimeParameters.x, _Property_9a849a5640a9487893ac41a1ffa034e3_Out_0_Float, _Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float);
        float _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float;
        Unity_Sine_float(_Multiply_e59e01eb96024b57b88aeac9208de4d6_Out_2_Float, _Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float);
        float _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float;
        Unity_Add_float(_Sine_eb40965c5bf541cfb80a025ef8a85951_Out_1_Float, float(1), _Add_da3b852ab51647519ee307f6300645e3_Out_2_Float);
        float _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float;
        Unity_Divide_float(_Add_da3b852ab51647519ee307f6300645e3_Out_2_Float, float(2), _Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float);
        float _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float = _EmissivePulseClamp;
        float _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float;
        Unity_Clamp_float(_Divide_e508d8c5c53740c4b84cb8f9725d026a_Out_2_Float, _Property_7b046017dde24a55a8ff69f5e812eea8_Out_0_Float, float(1), _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float);
        float _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float;
        Unity_Multiply_float_float(_Lerp_e9471b99c52a47938e6baa2d78471943_Out_3_Float, _Clamp_226ade4437e1483c893b0aa580d0aae2_Out_3_Float, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float);
        float _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float;
        Unity_Branch_float(_Property_a909c209752340139db38b35c6eb65c8_Out_0_Boolean, _Multiply_503ef76a38514ecfada4350507209e67_Out_2_Float, _Maximum_4ae43bb0ba864881ad369288c899bac4_Out_2_Float, _Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float);
        #ifdef SHADERGRAPH_PREVIEW
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = 1.0;
        #else
        float _Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3 = GetCurrentExposureMultiplier();
        #endif
        float3 _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3 = Unity_HDRP_GetEmissionHDRColor_float(_Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3.xyz, ConvertEvToLuminance(_Branch_c0b4d536fdb140b994557b2dcbc9ef78_Out_3_Float), (_Exposure_4ebae41d519e4306a720beff9c1ec9a5_Output_0_Vector3).x);
        UnityTexture2D _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D = _NormalMap;
        float4 _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.tex, _Property_905751a5a7734b6f96c0c9ea768d789a_Out_0_SamplerState.samplerstate, _Property_307ad39850794bc5bfc4d34d52d5a3ae_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
        _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4);
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_R_4_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.r;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_G_5_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.g;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_B_6_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.b;
        float _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_A_7_Float = _SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.a;
        float _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float = _NormalStrengthA;
        float _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_R_4_Float, _Property_5a0f0b1e1f674b88b57d24efbb7dc94f_Out_0_Float, _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float);
        float3 _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_86d1ff1fa6c24d37a67ec79faf264d80_Out_2_Float, _NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3);
        float _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float = _NormalStrengthB;
        float _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_G_5_Float, _Property_49b39f1a961247c3a5d68bbcf758dd1a_Out_0_Float, _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float);
        float3 _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_07221e5be1b94e91b96b6acdad276df9_Out_2_Float, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3);
        float3 _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalStrength_d74f9f02d37448c095728fc4b472a911_Out_2_Vector3, _NormalStrength_a9e0c49f0a6c40209e9cf066e2507b89_Out_2_Vector3, _NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3);
        float _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float = _NormalStrengthC;
        float _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_B_6_Float, _Property_e4801bd755aa4765ad44a9023b7f9287_Out_0_Float, _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float);
        float3 _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_98315ff8b4c14c299c7b45d8e70c07a6_Out_2_Float, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3);
        float3 _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_6561a57734ce412d89a532c3f95c9699_Out_2_Vector3, _NormalStrength_4cc7993c1ef24706b177e8fda53993c9_Out_2_Vector3, _NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3);
        float _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float = _NormalStrengthD;
        float _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float;
        Unity_Multiply_float_float(_SampleTexture2D_2e523d6bf5d14fd7be0de93b875a8c35_A_7_Float, _Property_dacfa7a283de40b1a90c1e4f2e32d2cf_Out_0_Float, _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float);
        float3 _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3;
        Unity_NormalStrength_float((_SampleTexture2D_d13fa2e649c845b782bb48c8e7852f20_RGBA_0_Vector4.xyz), _Multiply_0c81c633b1264f3b8c9e37df6240544e_Out_2_Float, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3);
        float3 _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        Unity_NormalBlend_float(_NormalBlend_1f37ee502a5b4effa976a306e1f1c15d_Out_2_Vector3, _NormalStrength_1d78178b04b848218f9f4567a0ed598f_Out_2_Vector3, _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3);
        BaseColor_1 = _Lerp_f12db01022d943f8803f2c555482682f_Out_3_Vector3;
        Emissive_3 = _EmissionNode_6fbed975db42447f9aac64eda3103a95_Output_0_Vector3;
        Normal_2 = _NormalBlend_b123a3262ec742658cc51004e52a9544_Out_2_Vector3;
        }
        
        // unity-custom-func-begin
        void HeadMask_float(float4 In1, float4 In2, float4 In3, float4 Mod1, float4 Mod2, float4 Mod3, float4 Scatter1, float4 Scatter2, float4 Scatter3, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            In3.zw = 0;
            float4 m = In1 + In2 + In3;
            float mask = saturate(m.x + m.y + m.z + m.w);
            float unmask = 1.0 - mask;
            
            SmoothnessMod = dot(In1, Mod1) + dot(In2, Mod2) + dot(In3, Mod3) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + dot(In2, Scatter2) + dot(In3, Scatter3) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        // unity-custom-func-begin
        void BodyMask_float(float4 In1, float4 Mod1, float4 Scatter1, float UMMS, float UMSS, out float ScatterMask, out float SmoothnessMod){
            float mask = saturate(In1.r + In1.g + In1.b + In1.a);
            
            float unmask = 1.0 - mask;
            
            
            
            SmoothnessMod = dot(In1, Mod1) + (UMMS * unmask);
            ScatterMask = dot(In1, Scatter1) + (UMSS * unmask);
        }
        // unity-custom-func-end
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float SubsurfaceMask;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d04a1ba74b404509b3874993b5771fe4_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_R_4_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.r;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_G_5_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.g;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_B_6_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.b;
            float _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_A_7_Float = _SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphDiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_f7cd520b90224711bf5ff8afd8f56df1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_R_4_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.r;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_G_5_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.g;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_B_6_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.b;
            float _SampleTexture2D_548f35900acb4551a77648bb8744c406_A_7_Float = _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471;
            float _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float;
            SG_SubSGPerlinNoise3D_a9d0e810228171349a3ac07147d8e5a8_float((float3(float4(0,0,0,0).xyz)), float(8), _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471, _SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float = _Morph;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc;
            float _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float;
            SG_SubSGAlphaErosion_f2e70d59b075d7e4f9ef34d6d810f3ca_float(_SubSGPerlinNoise3D_bc3b044c49d54d9091485406c2e6c471_Value_0_Float, _Property_e0e945a7c20f4c56933af018c48f3655_Out_0_Float, float(0.145), _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc, _SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_847ac5df0b2d4dd58b05ed5100fd2d88_RGBA_0_Vector4, _SampleTexture2D_548f35900acb4551a77648bb8744c406_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_ec50b266954540c39320b5e6db879290_Out_0_Vector4, _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4, _Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ColorBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e222cb2bff344522873e60fba8643903_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_R_4_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.r;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_G_5_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.g;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_B_6_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.b;
            float _SampleTexture2D_57d17176266344f3bdf544fcd3993330_A_7_Float = _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float = _ColorBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4;
            Unity_Blend_Overlay_float4(_Multiply_2b39ec00915848f88c1526a4cef37635_Out_2_Vector4, _SampleTexture2D_57d17176266344f3bdf544fcd3993330_RGBA_0_Vector4, _Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, _Property_d0f639d2d1ac4285b4ee05ffd5db4009_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MNAOMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e750faa0e3d44f9e9973ff8e08aa9dd9_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_R_4_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.r;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_G_5_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.g;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_B_6_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.b;
            float _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_A_7_Float = _SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4;
            Unity_Clamp_float4(_SampleTexture2D_8360103f39bf4473b53bff12b89d4193_RGBA_0_Vector4, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_b8dca6839b2546f4add1900701779c26_R_1_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[0];
            float _Split_b8dca6839b2546f4add1900701779c26_G_2_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[1];
            float _Split_b8dca6839b2546f4add1900701779c26_B_3_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[2];
            float _Split_b8dca6839b2546f4add1900701779c26_A_4_Float = _Clamp_ac3a80b81e024f529669ce414320f8b0_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float = _MouthCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_G_2_Float, _Property_b7d3ea63e79f48f3a8c42957ac61a8b5_Out_0_Float, _Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float = _NostrilCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_B_3_Float, _Property_953f2f4ce7334fa3b917c18a10d71bca_Out_0_Float, _Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float = _LipsCavityAO;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float;
            Unity_Power_float(_Split_b8dca6839b2546f4add1900701779c26_A_4_Float, _Property_08daa7a83f7b4889850c944add52dbb1_Out_0_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float;
            Unity_Multiply_float_float(_Power_d851bd5557a04ed4b753f5deab9ab7b3_Out_2_Float, _Power_53dba8790d2442ed8f1b1de382253a0e_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float;
            Unity_Multiply_float_float(_Power_a75487134df7415f955b33cff9f98ab4_Out_2_Float, _Multiply_67bfdd4a87d54c4eb0e6fd97ea8bde3b_Out_2_Float, _Multiply_f766681671b24953a25310189a3931a6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Blend_35d381f3a7994da39121a67ca007c2ed_Out_2_Vector4, (_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float.xxxx), _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4 = _DiffuseColor;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_DiffuseMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_fbd8a56452444ca6aae3067d4c1a6f4e_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_R_4_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.r;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_G_5_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.g;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_B_6_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.b;
            float _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            Unity_Multiply_float4_float4(_Property_d584e376984b490a8275e938ae72ed5e_Out_0_Vector4, _SampleTexture2D_5e600846744441f691aacca6271d740a_RGBA_0_Vector4, _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_2fb263a485e1422cb255f3f4b19781a7_Out_2_Vector4;
            #else
            float4 _IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4 = _Multiply_8c32d2e72c10434f82ad4f14bb3db31d_Out_2_Vector4;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_TattooNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorA) : _TattooColorA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorB) : _TattooColorB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorC) : _TattooColorC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4 = IsGammaSpace() ? LinearToSRGB(_TattooColorD) : _TattooColorD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float = _TattooEmissiveA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float = _TattooEmissiveB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float = _TattooEmissiveC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float = _TattooEmissiveD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean = _TattooWyrdlook;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float = _TattooNormalA;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float = _TattooNormalB;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float = _TattooNormalC;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float = _TattooNormalD;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            Bindings_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.uv0 = IN.uv0;
            _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a.TimeParameters = IN.TimeParameters;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            float3 _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3;
            SG_SubGraphCharacterTattoo_ece21c5ce2368cf4d9cd17f6eaae84da_float((_IsHead_2a91b4210c2540408a5f7008c3a6ae59_Out_0_Vector4.xyz), _Property_cda89c515de741fa8f767f06e1ce24f7_Out_0_Texture2D, _Property_0a4eeee6e60d4dd4945f9fd8d5d160b6_Out_0_Texture2D, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _Property_b79935ca366d498c9101d14a3b8cbc43_Out_0_Vector4, _Property_62c9dbebd5994bb6a30d38692d27d896_Out_0_Vector4, _Property_e77a25ed9b544becaf45089c35883c92_Out_0_Vector4, _Property_83a48f67792743428e4f1d4405b98fce_Out_0_Vector4, _Property_c5da74f27de5486aad5b068a1b713531_Out_0_Float, _Property_0a47cd1dc9b24d058d313dfef14530b1_Out_0_Float, _Property_4202a573cc04454a86bb1d882ccb5814_Out_0_Float, _Property_c43d1c40672d461cb21bb0483119bf11_Out_0_Float, _Property_d4a1bcd89a2f4abaa2e16b6371fbc417_Out_0_Boolean, float(2), float(0.8), float(1), float(10), _Property_7e4aee2deb0e44cf8802fa9438ae2526_Out_0_Float, _Property_038e54c66d5146a2bc3c4dfb389db558_Out_0_Float, _Property_3446eb89df1b4c6baa088b2eb144eae4_Out_0_Float, _Property_3bd99cf6d43045fa9bf545f394d951e3_Out_0_Float, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3, _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_995acc332f73499fafbbaa8fcf1820a3_R_1_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[0];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_G_2_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[1];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_B_3_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[2];
            float _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float = _Lerp_da755877c66e41578cf86b91e96a50f5_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _Split_995acc332f73499fafbbaa8fcf1820a3_A_4_Float;
            #else
            float _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float = _SampleTexture2D_5e600846744441f691aacca6271d740a_A_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float = _SmoothnessMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float = _SmoothnessMax;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_66179ca98b2a453b960048dd690efe80_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_R_4_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.r;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_G_5_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.g;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_B_6_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.b;
            float _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_A_7_Float = _SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphMaskMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_422884958605471d9a17c77a7c7d92ad_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_R_4_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.r;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_G_5_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.g;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_B_6_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.b;
            float _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_A_7_Float = _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_09ca3df97218446e983a962c74cc98f4_RGBA_0_Vector4, _SampleTexture2D_6ee19ca1a18c4f89a12de36216b42722_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_R_1_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[0];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[1];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[2];
            float _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float = _Lerp_b7e962b2c06345459a9c85227c1ea065_Out_3_Vector4[3];
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float;
            Unity_Saturate_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_A_4_Float, _Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float = _SmoothnessPower;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float;
            Unity_Power_float(_Saturate_07db0a29efc54042ade27bb8935d48a6_Out_1_Float, _Property_133fbe260a9a47af92f464ef0088253a_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float;
            Unity_Lerp_float(_Property_3d60b782c9dd4e5494f6fc269bee5bfa_Out_0_Float, _Property_cada9cea9620451d83525a727c0f7769_Out_0_Float, _Power_4082d083d2a14f029ccf2324754b1d9c_Out_2_Float, _Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_91850bdf7dcc4bf499f0b38e269d38f1_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_R_4_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.r;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_G_5_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.g;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_B_6_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.b;
            float _SampleTexture2D_05825271cdd44659ac6f7b39697db616_A_7_Float = _SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_CFULCMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_97ed7b3c251541af836cf9d87cf8d819_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_R_4_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.r;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_G_5_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.g;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_B_6_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.b;
            float _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_A_7_Float = _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_EarNeckMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_2e9f729099a7471b905328ce4ab3d62d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_R_4_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.r;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_G_5_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.g;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_B_6_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.b;
            float _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_A_7_Float = _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4 = float4(_Property_7c140dfa3ad541778295a2628ecf3520_Out_0_Float, _Property_9c9b0e360b6a4384991b11c8bd5d1b90_Out_0_Float, _Property_1fbe2c60822445559fe2af3b7355397d_Out_0_Float, _Property_d7abef3c272c480098cee3b4808d7d3f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float = _CheekSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float = _ForeheadSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float = _UpperLipSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float = _ChinSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4 = float4(_Property_6b1bfcb0a944448491e4361744eadcad_Out_0_Float, _Property_e2ec96e135f9461382359ae7e3f6df33_Out_0_Float, _Property_33989d390d0244088b0a2ac22e778165_Out_0_Float, _Property_9e53b02950a74aaeac3b759695803b53_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float = _NeckSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float = _EarSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4 = float4(_Property_5c71ced646a0493ea0562df9d7a1ec33_Out_0_Float, _Property_3f04ec4c0414483791e7e56388b25b1f_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4 = float4(_Property_1acd2114eeca41e1931e48aa19b1a1c8_Out_0_Float, _Property_248c9a1da008405ba7595e996125bef3_Out_0_Float, _Property_c46af3d4a47a4a879990007d0abb9155_Out_0_Float, _Property_efab06ea88604aa284d3d113d48d4342_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float = _CheekScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float = _ForeheadScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float = _UpperLipScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float = _ChinScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4 = float4(_Property_dbe8c88f1fed41489b58cb2c624b07f5_Out_0_Float, _Property_d3318e127b3b43748fe6886e280d5ff7_Out_0_Float, _Property_fa47195d70db452ab131f74751df00f8_Out_0_Float, _Property_1284b21313e24c299fc3593aae4be71c_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float = _NeckScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float = _EarScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4 = float4(_Property_968eb1260de247a6ae11d93ffb62c370_Out_0_Float, _Property_352c5e7ba2f8421e9a1628d45c6167c1_Out_0_Float, float(0), float(0));
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            float _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            HeadMask_float(_SampleTexture2D_05825271cdd44659ac6f7b39697db616_RGBA_0_Vector4, _SampleTexture2D_a65fd5b8249049cfa4978cb95f2906dd_RGBA_0_Vector4, _SampleTexture2D_39abf23a0de14b4f9a35f8bda206a3f5_RGBA_0_Vector4, _Vector4_d9fffa5b0642499e9cfb4904fa579915_Out_0_Vector4, _Vector4_efb12c27a80d4b58b763e55ec9cda203_Out_0_Vector4, _Vector4_ecee4b316f804aaabfb9ab9d90fe4712_Out_0_Vector4, _Vector4_e4feeb6b4fe6422c99a6d9f7204b3f77_Out_0_Vector4, _Vector4_2e7b1b44474a40d6be90556281a77042_Out_0_Vector4, _Vector4_c8762bfc89e1476c9208f214d2cf9621_Out_0_Vector4, _Property_d12453dda1c34b6f833d8eda4eaf2c27_Out_0_Float, _Property_24f9c2c72d194b8b871004f37990ecb0_Out_0_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float, _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_RGBAMask);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_192263bfabbf44cfb1f9f99b834e186a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_R_4_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.r;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_G_5_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.g;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_B_6_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.b;
            float _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_A_7_Float = _SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float = _RSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float = _GSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float = _BSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float = _ASmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4 = float4(_Property_b80337ac31e04b05a002e9f81ddbea8c_Out_0_Float, _Property_8f8ca0a3b0dd4e448dbb945df2bfa639_Out_0_Float, _Property_0903703114694cb880a37e61d972fe9a_Out_0_Float, _Property_5829e6acf7d8498c8a97e0b64f4f7bed_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float = _RScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float = _GScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float = _BScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float = _AScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4 = float4(_Property_fb95eeb30d884d54b358cca7f6a99063_Out_0_Float, _Property_dccc1e0050614b2398bfce4b52a305ca_Out_0_Float, _Property_959ff1148b3349e48ee64a4e9b62185f_Out_0_Float, _Property_e8a9cd81d6544753bf2cb708ed17484f_Out_0_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float = _UnmaskedSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float = _UnmaskedScatterScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            float _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            BodyMask_float(_SampleTexture2D_4b8aae1832a34ca98002df9614e79836_RGBA_0_Vector4, _Vector4_5b77a116b0324bf3a9ff4a6fbd7be00e_Out_0_Vector4, _Vector4_74c7f8c267824f2c8b0ca2fe1be022b7_Out_0_Vector4, _Property_054d372238b9453397bdd30799bcae8c_Out_0_Float, _Property_0514eb06c8e64135b177afb0301976e3_Out_0_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float, _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_SmoothnessMod_13_Float;
            #else
            float _IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_SmoothnessMod_4_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float = _MicroSmoothnessMod;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float;
            Unity_Add_float(_IsHead_32f21a4535e54ce48c097e51586c2235_Out_0_Float, _Property_e74d1c75dc2045d287c81ef5ddb0993e_Out_0_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float;
            Unity_Add_float(_Lerp_41d505aa97584e2ca6e2f617918967fe_Out_3_Float, _Add_c234d329286d44ecb1b0b7d5805e8726_Out_2_Float, _Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            Unity_Saturate_float(_Add_6bd5468e24044965901c2f8235874ad4_Out_2_Float, _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_f766681671b24953a25310189a3931a6_Out_2_Float, _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float, _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Multiply_a07e525b0a0e425bb3348c1bded0c9b6_Out_2_Float;
            #else
            float _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float = _Split_5fdf1bd6592b41e8a1aa909740c0d1c6_G_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_69822902c84c428080db9893d32ee267_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4);
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_R_4_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.r;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_G_5_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.g;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_B_6_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.b;
            float _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_A_7_Float = _SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_674a082a7b124a24b8c7146515e9a3fd_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4);
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_R_4_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.r;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_G_5_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.g;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_B_6_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.b;
            float _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_A_7_Float = _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_1ceaea2d8a314216847b3e129a914f2c_RGBA_0_Vector4, _SampleTexture2D_3190240e08d847cab2d734c0fce4bc89_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_c3785a1d309f49b497473731b44f43a5_Out_3_Vector4.xyz), _Property_86ad6d85ef8b4b1d8bdb8341d5505bf6_Out_0_Float, _NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalBlendMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_c48b0bc83f544969b8903ab18833641f_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4);
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_R_4_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.r;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_G_5_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.g;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_B_6_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.b;
            float _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_A_7_Float = _SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float = _NormalBlendStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a5dc0c9495c34a1cbc486e1eae20b24a_RGBA_0_Vector4.xyz), _Property_b5303edc98994295a7b3d47c8554f4eb_Out_0_Float, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            Unity_NormalBlend_float(_NormalStrength_6ef6f3cedf274dfa9c7c43c186f36c1b_Out_2_Vector3, _NormalStrength_be0b6de023f04f3c8f86fdf44da92670_Out_2_Vector3, _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_NormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9c2a7707ea0049638b2b48ac9f03a14a_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4);
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_R_4_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.r;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_G_5_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.g;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_B_6_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.b;
            float _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_A_7_Float = _SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MorphNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_25ffd6f9b989465990f0b0c6cd2294fb_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4);
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_R_4_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.r;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_G_5_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.g;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_B_6_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.b;
            float _SampleTexture2D_1661a67b019248778c78168012350ac4_A_7_Float = _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2D_b8dcd461a8b34ed6b2c77a51052430bb_RGBA_0_Vector4, _SampleTexture2D_1661a67b019248778c78168012350ac4_RGBA_0_Vector4, (_SubSGAlphaErosion_08ea90680f3647659153bbfaffd171cc_Out_0_Float.xxxx), _Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float = _NormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            Unity_NormalStrength_float((_Lerp_385f9ce7fda64c27b94857e25a47b9ae_Out_3_Vector4.xyz), _Property_08dd23b8ffa54bfd8eab5eb42b6fd2f6_Out_0_Float, _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalBlend_f4c8ed6045604a808bfc1aa7cdbbd81a_Out_2_Vector3;
            #else
            float3 _IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3 = _NormalStrength_70b873bba57647c09b9319eb9df5122d_Out_2_Vector3;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_MicroNormalMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float = _MicroNormalTiling;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float2 _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2;
            Unity_TilingAndOffset_float(IN.uv0.xy, (_Property_92460f8b665b4a03bb23e7fe80bdff90_Out_0_Float.xx), float2 (0, 0), _TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_9203aadcc7e34fcbb60c753b4a4bd252_Out_0_Texture2D.GetTransformedUV(_TilingAndOffset_2a43d5b227114bb2b6f245cbdffd15e5_Out_3_Vector2) );
            _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4);
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_R_4_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.r;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_G_5_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.g;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_B_6_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.b;
            float _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_A_7_Float = _SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float = _MicroNormalStrength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float;
            Unity_Multiply_float_float(_Split_5fdf1bd6592b41e8a1aa909740c0d1c6_B_3_Float, _Property_5b5d90ab491f441884a78ece78c6e7a1_Out_0_Float, _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_281c2fab10a54a88ace70a99836fe852_RGBA_0_Vector4.xyz), _Multiply_d487e51cc2ea47f7a3736b88a760f012_Out_2_Float, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3;
            Unity_NormalBlend_float(_IsHead_e4854a73e1f1473a9ad71dc1f45fb158_Out_0_Vector3, _NormalStrength_9abeb9fdadd74574b4e6738541daa06a_Out_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float3 _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            Unity_NormalBlend_float(_SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Normal_2_Vector3, _NormalBlend_959bbc37ca814b42be52d1bd1b64e66f_Out_2_Vector3, _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float = _SubsurfaceScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            #if defined(BOOLEAN_IS_HEAD_ON)
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _HeadMaskCustomFunction_c6f506199a9c4cdb882b3aebb87c4245_ScatterMask_14_Float;
            #else
            float _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float = _BodyMaskCustomFunction_6829c94d9a2c4e83bf28f1f2c0c38d78_ScatterMask_7_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float;
            Unity_Multiply_float_float(_Property_15c4fec5ae0a40cfae514e94cf634394_Out_0_Float, _IsHead_91518443319044bc8e4fd05de7e2581b_Out_0_Float, _Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_SSSMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_03f70d9a000b4f7486d44ca34a72624d_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.r;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_G_5_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.g;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_B_6_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.b;
            float _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_A_7_Float = _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float;
            Unity_Multiply_float_float(_Multiply_88099319861e4e23be99db174b2b7c9e_Out_2_Float, _SampleTexture2D_2573b278f94f489baa02b6e4f8abf14e_R_4_Float, _Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            Unity_Saturate_float(_Multiply_84f1f5cdd3724f5398e1a2c6b9bd0cd8_Out_2_Float, _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_ae3712da060746dab0542f01885e16fb_Out_0_Float = _ThicknessScaleMin;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float = _ThicknessScale;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            UnityTexture2D _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(_ThicknessMap);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float4 _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_76c23cf23e734562b54dc8d34763eadf_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_R_4_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.r;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.g;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_B_6_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.b;
            float _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_A_7_Float = _SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float;
            Unity_OneMinus_float(_SampleTexture2D_e177d7f1d3284a96a99e4967794fde8e_G_5_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float;
            Unity_Lerp_float(_Property_ae3712da060746dab0542f01885e16fb_Out_0_Float, _Property_44bc17bcc71c4ae19156bb362cae14ae_Out_0_Float, _OneMinus_627a6231a44a450daea568ab3d65e599_Out_1_Float, _Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
            float _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            Unity_Saturate_float(_Lerp_65425b9f9bd0498e9705aa2e25bf287b_Out_3_Float, _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float);
            #endif
            surface.BaseColor = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_BaseColor_1_Vector3;
            surface.Emission = _SubGraphCharacterTattoo_85a7eac50de148a793935cbd39d2131a_Emissive_3_Vector3;
            surface.Alpha = _IsHead_263ec88ed5b14e64b2f477156c8df843_Out_0_Float;
            surface.AlphaClipThreshold = float(0.5);
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Saturate_4d5d4124bf664f4d9af264e412e1b431_Out_1_Float;
            surface.Occlusion = _IsHead_4f74e65e559a414caef040647a6517ce_Out_0_Float;
            surface.NormalTS = _NormalBlend_f1461b9056d6452e91751df1d51c2698_Out_2_Vector3;
            surface.SubsurfaceMask = _Saturate_598e2f191176484ca6ce6ff63ac81a82_Out_1_Float;
            surface.TransmissionMask = float(1);
            surface.Thickness = _Saturate_94a28544ec1a41daa10643a5e3895572_Out_1_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080238260)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
        #endif
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.WorldSpaceViewDirection =                    normalize(viewWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #else
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        output.TimeParameters =                             _TimeParameters.xyz; // This is mainly for LW as HD overwrite this value
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
            surfaceData.thickness = 0.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.subsurfaceMask =            surfaceDescription.SubsurfaceMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask.xxx;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
        
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
            #if !defined(SHADER_STAGE_RAY_TRACING)
                // Mipmap mode debugging isn't supported with ray tracing as it relies on derivatives
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    #ifdef FRAG_INPUTS_USE_TEXCOORD0
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
                    #else
                        surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
                    #endif
                    surfaceData.metallic = 0;
                }
            #endif
        
                // We need to call ApplyDebugToSurfaceData after filling the surfaceData and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        surfaceDescription.Alpha = 1.0f;
        #endif
        
                }
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLayerMask();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        		// When overriding GI, we need to force the isLightmap flag to make sure we don't add APV (sampled in the lightloop) on top of the overridden value (set at GBuffer stage)
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRayTracingSubSurface.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
                #if !defined(SHADER_STAGE_RAY_TRACING)
        	    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
                #else
                #endif
        	#endif
        
            ENDHLSL
        }
    }
    CustomEditor "UnityEditor.ShaderGraph.GenericShaderGraphMaterialGUI"
    CustomEditorForRenderPipeline "Rendering.HighDefinition.LitShaderGraphGUI" "UnityEngine.Rendering.HighDefinition.HDRenderPipelineAsset"
    FallBack "Hidden/Shader Graph/FallbackError"
}
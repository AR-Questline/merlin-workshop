#pragma kernel CalculateTrianglesAreasUInt
#pragma kernel CalculateTrianglesAreasUShort
#pragma kernel AccumulateTrianglesAreas

#include "UniformMeshSamplingHelpers.hlsl"

// InputMesh
ByteAddressBuffer VertexPositionsStreamBuffer;
int VertexPositionStride;
int VertexPositionOffset;

ByteAddressBuffer VertexUVStreamBuffer;
int VertexUVStride;
int VertexUVOffset;

ByteAddressBuffer IndicesBufferUInt;
ByteAddressBuffer IndicesBufferUShort;
int TrianglesCount;

// Output
RWStructuredBuffer<TriangleWithUV> Triangles;
RWStructuredBuffer<float> AccumulatedTriangleArea;

float3 LoadVertexPosition(uint vertexIndex)
{
    uint positionLoadIndex = vertexIndex * VertexPositionStride + VertexPositionOffset;
    return asfloat(VertexPositionsStreamBuffer.Load3(positionLoadIndex));
}

float2 LoadVertexUV(uint vertexIndex)
{
    uint uvLoadIndex = vertexIndex * VertexUVStride + VertexUVOffset;
    return asfloat(VertexUVStreamBuffer.Load2(uvLoadIndex));
}

TriangleWithUV LoadTriangle(uint v0, uint v1, uint v2)
{
    TriangleWithUV triangleVertices;
    triangleVertices.v0Pos = LoadVertexPosition(v0);
    triangleVertices.v0UV = LoadVertexUV(v0);
    triangleVertices.v1Pos = LoadVertexPosition(v1);
    triangleVertices.v1UV = LoadVertexUV(v1);
    triangleVertices.v2Pos = LoadVertexPosition(v2);
    triangleVertices.v2UV = LoadVertexUV(v2);
    return triangleVertices;
}

[numthreads(128, 1, 1)]
void CalculateTrianglesAreasUInt(uint3 id : SV_DispatchThreadID)
{
    const uint triangleIndex = id.x;
    if (triangleIndex >= TrianglesCount) return;

    const uint baseIndex = triangleIndex * 3 * 4;
    const uint3 indices = IndicesBufferUInt.Load3(baseIndex);

    const TriangleWithUV triangleWIthUV = LoadTriangle(indices.x, indices.y, indices.z);
    Triangles[triangleIndex] = triangleWIthUV;

    const float area = 0.5 * length(cross(triangleWIthUV.v1Pos - triangleWIthUV.v0Pos, triangleWIthUV.v2Pos - triangleWIthUV.v0Pos));
    AccumulatedTriangleArea[triangleIndex] = area;
}

[numthreads(128, 1, 1)]
void CalculateTrianglesAreasUShort(uint3 id : SV_DispatchThreadID)
{
    const uint triangleIndex = id.x;
    if (triangleIndex >= TrianglesCount) return;

    const bool isOdd = (triangleIndex & 1) != 0;
    const uint loadIndex = triangleIndex * 6 - (isOdd ? 2u : 0u);
    // Buffer.Load address should be divisible by 4.
    // If number is even, then it can be represented as 2k. If loadIndex is even, then its value is
    // 2k * 6 = 12k, which is divisible by 4.
    // If number is odd, then it can represented as 2k + 1. If loadIndex is odd, then its value is
    // ((2k + 1) * 6) - 2 = 12k + 6 - 2 = 12k + 4, which is divisible by 4

    uint2 indices = IndicesBufferUShort.Load2(loadIndex);

    const uint shiftBits = isOdd ? 16 : 0;
    const uint yToXShiftMask = isOdd ? 0xFFFF0000 : 0;
    // When load triangle index is even, loaded uint2 contains needed 3 ushort values in order and 4th redundant.
    // When load triangle index is odd, loaded uint2 has redundant ushort value as first value, so using bit shifting to
    // shift 1st value to 0, 2nd to 1st and 3rd to 2nd ushort index. There is no ulong value in compute shaders, otherwise it would
    // be as easy as one bitshift on ulong value
    indices = uint2((indices.x >> shiftBits) | ((indices.y << shiftBits) & yToXShiftMask), indices.y >> shiftBits);
    // Masking uint value to extract ushort values
    const uint vertex0Index = indices.x & 0xFFFF;
    const uint vertex1Index = (indices.x >> 16) & 0xFFFF;
    const uint vertex2Index = indices.y & 0xFFFF;

    const TriangleWithUV triangleWIthUV = LoadTriangle(vertex0Index, vertex1Index, vertex2Index);
    Triangles[triangleIndex] = triangleWIthUV;

    const float area = 0.5 * length(cross(triangleWIthUV.v1Pos - triangleWIthUV.v0Pos, triangleWIthUV.v2Pos - triangleWIthUV.v0Pos));
    AccumulatedTriangleArea[triangleIndex] = area;
}

// TODO: Make it parallel: https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda
[numthreads(1, 1, 1)]
void AccumulateTrianglesAreas(uint3 id : SV_DispatchThreadID)
{
    for (uint i = 1; i < TrianglesCount; i++)
    {
        AccumulatedTriangleArea[i] += AccumulatedTriangleArea[i - 1];
    }
}

using Awaken.TG.Main.Character;
using Awaken.TG.Main.Fights.DamageInfo;
using Awaken.TG.Main.Heroes.Statuses.Duration;
using Awaken.TG.Main.Saving;
using Awaken.TG.MVC;
using Awaken.TG.MVC.Events;

namespace Awaken.TG.Main.Heroes.Combat {
    public partial class CharacterInvulnerability : DurationProxy<ICharacter> {
        public sealed override bool IsNotSaved => true;

        public override IModel TimeModel => ParentModel;
        
        // === Constructor
        CharacterInvulnerability(IDuration duration) : base(duration) {}
        
        // === Initialization
        protected override void OnInitialize() {
            ParentModel.HealthElement.ListenTo(HealthElement.Events.TakingDamage, OnTakingDamage, this);
        }
        
        // === Blocking Damage
        void OnTakingDamage(HookResult<HealthElement, Damage> hook) {
            hook.Prevent();
        }
        
        // === Public API
        public static void ApplyInvulnerability(ICharacter character, IDuration duration) {
            CharacterInvulnerability prevent = character.TryGetElement<CharacterInvulnerability>();
            if (prevent != null) {
                prevent.Duration.Renew(duration);
            } else {
                character.AddElement(new CharacterInvulnerability(duration));
            }
        }
    }
}